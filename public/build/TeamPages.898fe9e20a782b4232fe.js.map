{"version":3,"sources":["webpack:///./public/app/features/teams/state/selectors.ts","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/teams/TeamSettings.tsx","webpack:///./public/app/features/teams/TeamGroupSync.tsx","webpack:///./public/app/core/components/WithFeatureToggle.tsx","webpack:///./public/app/features/teams/TeamMemberRow.tsx","webpack:///./public/app/features/teams/TeamMembers.tsx","webpack:///./public/app/features/teams/state/actions.ts","webpack:///./public/app/features/teams/TeamPages.tsx","webpack:///./public/app/features/teams/state/navModel.ts"],"names":["getSearchQuery","state","searchQuery","getSearchMemberQuery","searchMemberQuery","getTeamGroups","groups","getTeamsCount","teams","length","getTeam","currentTeamId","team","id","parseInt","getTeams","regex","RegExp","filter","test","name","getTeamMembers","members","member","login","email","isSignedInUserTeamAdmin","config","signedInUser","editorsCanAdmin","userInMembers","find","m","userId","permission","TeamPermissionLevel","Member","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","Admin","userIsTeamAdmin","FilterInput","forwardRef","props","ref","className","labelClassName","type","inputClassName","value","unEscapeStringFromRegex","onChange","event","escapeStringForRegex","target","placeholder","TeamSettings","onChangeName","setState","onChangeEmail","onUpdate","preventDefault","updateTeam","this","onSubmit","required","tooltip","resourceUri","React","Component","mapDispatchToProps","connect","teamId","getRouteParamsId","location","headerTooltip","TeamGroupSync","onToggleAdding","isAdding","onNewGroupIdChanged","newGroupId","onAddGroup","addTeamGroup","onRemoveGroup","group","removeTeamGroup","groupId","fetchTeamGroups","loadTeamGroups","key","style","width","onClick","placement","content","in","disabled","isNewGroupValid","buttonIcon","title","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","map","renderGroup","PureComponent","WithFeatureToggle","featureToggle","children","TeamMemberRow","onPermissionChange","item","updatedTeamMember","updateTeamMember","renderLabels","bind","renderPermissions","removeTeamMember","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","options","label","labels","TagBadge","removeIcon","count","syncEnabled","src","avatarUrl","size","onConfirm","onRemoveMember","TeamMembers","onSearchQueryChange","setSearchMemberQuery","onUserSelected","user","newTeamMember","onAddUserToTeam","addTeamMember","isTeamAdmin","SlideDown","UserPicker","onSelected","contextSrv","loadTeams","dispatch","getBackendSrv","get","perpage","page","response","teamsLoaded","loadTeam","teamLoaded","updateNavIndex","buildNavModel","loadTeamMembers","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","PageTypes","TeamPages","textsAreEqual","text1","text2","toLocaleLowerCase","hideTabsFromNonTeamAdmin","navModel","main","navItem","text","Members","hideFromTabs","isLoading","isSyncEnabled","licenseInfo","hasLicense","fetchTeam","pages","currentPage","pageName","_","includes","getCurrentPage","Settings","GroupSync","Contents","Object","keys","renderPage","hot","module","getRouteParamsPage","teamLoadingNav","getTeamLoadingNav","getNavModel","navIndex","img","subTitle","url","breadcrumbs","active","icon","push","node","memberCount","child","indexOf"],"mappings":"8FAAA,kUAGaA,EAAiB,SAACC,GAAD,OAAuBA,EAAMC,aAC9CC,EAAuB,SAACF,GAAD,OAAsBA,EAAMG,mBACnDC,EAAgB,SAACJ,GAAD,OAAsBA,EAAMK,QAC5CC,EAAgB,SAACN,GAAD,OAAuBA,EAAMO,MAAMC,QAEnDC,EAAU,SAACT,EAAkBU,GACxC,OAAIV,EAAMW,KAAKC,KAAOC,SAASH,EAAe,IACrCV,EAAMW,KAGR,MAGIG,EAAW,SAACd,GACvB,IAAMe,EAAQC,OAAOhB,EAAMC,YAAa,KAExC,OAAOD,EAAMO,MAAMU,QAAO,SAAAN,GACxB,OAAOI,EAAMG,KAAKP,EAAKQ,UAIdC,EAAiB,SAACpB,GAC7B,IAAMe,EAAQC,OAAOhB,EAAMG,kBAAmB,KAE9C,OAAOH,EAAMqB,QAAQJ,QAAO,SAAAK,GAC1B,OAAOP,EAAMG,KAAKI,EAAOC,QAAUR,EAAMG,KAAKI,EAAOE,QAAUT,EAAMG,KAAKI,EAAOH,UAUxEM,EAA0B,SAACC,GAA4B,IAC1DL,EAA2CK,EAA3CL,QAASM,EAAkCD,EAAlCC,aAAcC,EAAoBF,EAApBE,gBACzBC,EAAgBR,EAAQS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,SAAWL,EAAaf,MAC5DqB,EAAaJ,EAAgBA,EAAcI,WAAaC,sBAAoBC,OAElF,OAAOC,EAAsB,CAAEH,aAAYN,eAAcC,qBAS9CQ,EAAwB,SAACV,GAAsC,IAClEO,EAA8CP,EAA9CO,WAAYN,EAAkCD,EAAlCC,aAAcC,EAAoBF,EAApBE,gBAC5BS,EAAUV,EAAaW,gBAAkBX,EAAaY,UAAYC,UAAQC,MAC1EC,EAAkBT,IAAeC,sBAAoBO,MAG3D,OAFgCJ,GAAWK,IAERd,I,kCC1DrC,uEAWae,EAAcC,sBAAoC,SAACC,EAAOC,GAAR,OAC7D,2BAAOC,UAAWF,EAAMG,gBACtB,2BACEF,IAAKA,EACLG,KAAK,OACLF,UAAWF,EAAMK,eACjBC,MAAOC,kCAAwBP,EAAMM,OACrCE,SAAU,SAAAC,GAAK,OAAIT,EAAMQ,SAASE,+BAAqBD,EAAME,OAAOL,SACpEM,YAAaZ,EAAMY,YAAcZ,EAAMY,YAAc,OAEvD,uBAAGV,UAAU,yC,06BCDV,IAAMW,EAAb,YACE,WAAYb,GAAc,a,4FAAA,UACxB,wBAAMA,KAQRc,aAAe,SAACL,GACd,EAAKM,SAAS,CAAEzC,KAAMmC,EAAME,OAAOL,SAVX,EAa1BU,cAAgB,SAACP,GACf,EAAKM,SAAS,CAAEpC,MAAO8B,EAAME,OAAOL,SAdZ,EAiB1BW,SAAW,SAACR,GAAe,MACD,EAAKtD,MAArBmB,EADiB,EACjBA,KAAMK,EADW,EACXA,MACd8B,EAAMS,iBACN,EAAKlB,MAAMmB,WAAW7C,EAAMK,IAjB5B,EAAKxB,MAAQ,CACXmB,KAAM0B,EAAMlC,KAAKQ,KACjBK,MAAOqB,EAAMlC,KAAKa,OALI,E,UAD5B,O,kOAAA,M,EAAA,G,EAAA,gCAwBW,IACCb,EAASsD,KAAKpB,MAAdlC,KADD,EAEiBsD,KAAKjE,MAArBmB,EAFD,EAECA,KAAMK,EAFP,EAEOA,MAEd,OACE,6BACE,wBAAIuB,UAAU,oBAAd,iBACA,0BAAM5B,KAAK,kBAAkB4B,UAAU,gBAAgBmB,SAAUD,KAAKH,UACpE,yBAAKf,UAAU,wBACb,kBAAC,YAAD,aACA,kBAAC,QAAD,CACEE,KAAK,OACLkB,UAAQ,EACRhB,MAAOhC,EACP4B,UAAU,6BACVM,SAAUY,KAAKN,gBAInB,yBAAKZ,UAAU,wBACb,kBAAC,YAAD,CAAWqB,QAAQ,gGAAnB,SAGA,kBAAC,QAAD,CACEnB,KAAK,QACLF,UAAU,6BACVI,MAAO3B,EACPiC,YAAY,iBACZJ,SAAUY,KAAKJ,iBAInB,yBAAKd,UAAU,sBACb,4BAAQE,KAAK,SAASF,UAAU,mBAAhC,YAKJ,kBAAC,IAAD,CAAmBsB,YAAW,gBAAW1D,EAAKC,Y,2BA9DtD,GAAkC0D,IAAMC,WA4ExC,IAAMC,EAAqB,CACzBR,gBAGaS,uBAZf,SAAyBzE,GACvB,IAAM0E,EAASC,YAAiB3E,EAAM4E,UAEtC,MAAO,CACLjE,KAAMF,YAAQT,EAAMW,KAAM+D,MAQUF,EAAzBC,CAA6Cf,I,miCC7E5D,IAAMmB,EAAgB,qDAETC,EAAb,YACE,WAAYjC,GAAc,a,4FAAA,UACxB,wBAAMA,KAYRkC,eAAiB,WACf,EAAKnB,SAAS,CAAEoB,UAAW,EAAKhF,MAAMgF,YAdd,EAiB1BC,oBAAsB,SAAC3B,GACrB,EAAKM,SAAS,CAAEsB,WAAY5B,EAAME,OAAOL,SAlBjB,EAqB1BgC,WAAa,SAAC7B,GACZA,EAAMS,iBACN,EAAKlB,MAAMuC,aAAa,EAAKpF,MAAMkF,YACnC,EAAKtB,SAAS,CAAEoB,UAAU,EAAOE,WAAY,MAxBrB,EA2B1BG,cAAgB,SAACC,GACf,EAAKzC,MAAM0C,gBAAgBD,EAAME,UA1BjC,EAAKxF,MAAQ,CAAEgF,UAAU,EAAOE,WAAY,IAFpB,E,YAD5B,S,kOAAA,M,EAAA,G,EAAA,2CAOIjB,KAAKwB,oBAPT,8B,EAAA,sIAWUxB,KAAKpB,MAAM6C,iBAXrB,iD,8KAAA,qFAiCI,OAAOzB,KAAKjE,MAAMkF,WAAW1E,OAAS,IAjC1C,kCAoCc8E,GAAkB,WAC5B,OACE,wBAAIK,IAAKL,EAAME,SACb,4BAAKF,EAAME,SACX,wBAAII,MAAO,CAAEC,MAAO,OAClB,uBAAG9C,UAAU,2BAA2B+C,QAAS,kBAAM,EAAKT,cAAcC,KACxE,uBAAGvC,UAAU,sBA1CzB,+BAiDW,aAC0BkB,KAAKjE,MAA9BgF,EADD,EACCA,SAAUE,EADX,EACWA,WACZ7E,EAAS4D,KAAKpB,MAAMxC,OAE1B,OACE,6BACE,yBAAK0C,UAAU,mBACb,wBAAIA,UAAU,oBAAd,uBACA,kBAAC,UAAD,CAASgD,UAAU,OAAOC,QAASnB,GACjC,yBAAK9B,UAAU,yBACb,uBAAGA,UAAU,4CAGjB,yBAAKA,UAAU,4BACd1C,EAAOG,OAAS,GACf,4BAAQuC,UAAU,6BAA6B+C,QAAS7B,KAAKc,gBAC3D,uBAAGhC,UAAU,eADf,eAMJ,kBAAC,IAAD,CAAWkD,GAAIjB,GACb,yBAAKjC,UAAU,YACb,4BAAQA,UAAU,sCAAsC+C,QAAS7B,KAAKc,gBACpE,uBAAGhC,UAAU,iBAEf,kDACA,0BAAMA,UAAU,iBAAiBmB,SAAUD,KAAKkB,YAC9C,yBAAKpC,UAAU,WACb,kBAAC,QAAD,CACEE,KAAK,OACLF,UAAU,yBACVI,MAAO+B,EACP7B,SAAUY,KAAKgB,oBACfxB,YAAY,wCAIhB,yBAAKV,UAAU,WACb,4BAAQA,UAAU,8BAA8BE,KAAK,SAASiD,UAAWjC,KAAKkC,mBAA9E,iBAQW,IAAlB9F,EAAOG,SAAiBwE,GACvB,kBAAC,IAAD,CACEc,QAAS7B,KAAKc,eACdqB,WAAW,mBACXC,MAAM,4CACNC,YAAY,YACZC,OAAQ1B,EACR2B,gBAAgB,aAChBC,WAAW,8CACXC,aAAa,WAIhBrG,EAAOG,OAAS,GACf,yBAAKuC,UAAU,oBACb,2BAAOA,UAAU,gDACf,+BACE,4BACE,iDACA,wBAAI6C,MAAO,CAAEC,MAAO,UAGxB,+BAAQxF,EAAOsG,KAAI,SAAArB,GAAK,OAAI,EAAKsB,YAAYtB,e,2BAtH3D,GAAmCuB,iBAqInC,IAAMrC,EAAqB,CACzBkB,mBACAN,iBACAG,qBAGad,uBAZf,SAAyBzE,GACvB,MAAO,CACLK,OAAQD,YAAcJ,EAAMW,SAUQ6D,EAAzBC,CAA6CK,I,+IC9J/CgC,EAA8C,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAC3E,OAAsB,IAAlBD,EACK,oCAAGC,GAGL,M,ymCCQF,IAAMC,EAAb,YACE,WAAYpE,GAAc,M,IAAA,O,4FAAA,S,EACxB,K,EAAA,eAAMA,IAAN,G,iDASFqE,mBAAqB,SAACC,EAA4C7F,GAChE,IACM8F,E,+VAAoB,CAAH,GAAQ9F,EAAR,CAAgBW,WADpBkF,EAAKhE,QAGxB,EAAKN,MAAMwE,iBAAiBD,IAZ5B,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,MACpB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,MAHD,E,UAD5B,O,kOAAA,M,EAAA,G,EAAA,sCAOiBjG,GACb2C,KAAKpB,MAAM4E,iBAAiBnG,EAAOU,UARvC,wCAkBoBV,GAAoB,aACiB2C,KAAKpB,MAAlDjB,EAD4B,EAC5BA,gBAAiB8F,EADW,EACXA,wBACnBvE,EAAQwE,wBAAsB7F,MAAK,SAAA8F,GAAE,OAAIA,EAAGzE,QAAU7B,EAAOW,cAEnE,OACE,kBAAC,EAAD,CAAmB8E,cAAenF,GAChC,wBAAImB,UAAU,4BACZ,yBAAKA,UAAU,WACZ2E,GACC,kBAAC,SAAD,CACEG,cAAc,EACdC,QAASH,wBACTtE,SAAU,SAAA8D,GAAI,OAAI,EAAKD,mBAAmBC,EAAM7F,IAChDyB,UAAU,0CACVI,MAAOA,KAGTuE,GAA2B,8BAAOvE,EAAM4E,YAnCtD,mCA0CeC,GACX,OAAKA,EAKH,4BACGA,EAAOrB,KAAI,SAAAoB,GAAK,OACf,kBAACE,EAAA,EAAD,CAAUtC,IAAKoC,EAAOA,MAAOA,EAAOG,YAAY,EAAOC,MAAO,EAAGrC,QAAS,mBANvE,+BA5Cb,+BAwDW,aACkD7B,KAAKpB,MAAtDvB,EADD,EACCA,OAAQ8G,EADT,EACSA,YAAaV,EADtB,EACsBA,wBAC7B,OACE,wBAAI/B,IAAKrE,EAAOU,QACd,wBAAIe,UAAU,uBACZ,yBAAKA,UAAU,uBAAuBsF,IAAK/G,EAAOgH,aAEpD,4BAAKhH,EAAOC,OACZ,4BAAKD,EAAOE,OACZ,4BAAKF,EAAOH,MACX8C,KAAKuD,kBAAkBlG,GACvB8G,GAAenE,KAAKqD,aAAahG,EAAO0G,QACzC,wBAAIjF,UAAU,cACZ,kBAAC,eAAD,CAAcwF,KAAK,KAAKrC,UAAWwB,EAAyBc,UAAW,kBAAM,EAAKC,eAAenH,a,2BArE3G,GAAmCuF,iBAgFnC,IAAMrC,EAAqB,CACzBiD,qBACAJ,sBAGa5C,qBATf,SAAyBzE,GACvB,MAAO,KAQ+BwE,EAAzBC,CAA6CwC,G,+mCC1ErD,IAAMyB,EAAb,YACE,WAAY7F,GAAc,a,4FAAA,UACxB,wBAAMA,KAIR8F,oBAAsB,SAACxF,GACrB,EAAKN,MAAM+F,qBAAqBzF,IANR,EAS1B4B,eAAiB,WACf,EAAKnB,SAAS,CAAEoB,UAAW,EAAKhF,MAAMgF,YAVd,EAa1B6D,eAAiB,SAACC,GAChB,EAAKlF,SAAS,CAAEmF,cAAeD,KAdP,EAiB1BE,gBAjB0B,2BAiBR,6FAChB,EAAKnG,MAAMoG,cAAc,EAAKjJ,MAAM+I,cAAcnI,IAClD,EAAKgD,SAAS,CAAEmF,cAAe,OAFf,2CAfhB,EAAK/I,MAAQ,CAAEgF,UAAU,EAAO+D,cAAe,MAFvB,E,UAD5B,O,kOAAA,M,EAAA,G,EAAA,oCAuBef,GACX,OAAKA,EAKH,4BACGA,EAAOrB,KAAI,SAAAoB,GAAK,OACf,kBAACE,EAAA,EAAD,CAAUtC,IAAKoC,EAAOA,MAAOA,EAAOG,YAAY,EAAOC,MAAO,EAAGrC,QAAS,mBANvE,+BAzBb,+BAqCW,IACCd,EAAaf,KAAKjE,MAAlBgF,SADD,EAE4Ef,KAAKpB,MAAhF1C,EAFD,EAECA,kBAAmBkB,EAFpB,EAEoBA,QAAS+G,EAF7B,EAE6BA,YAAaxG,EAF1C,EAE0CA,gBAAiBD,EAF3D,EAE2DA,aAC5DuH,EAAczH,YAAwB,CAAEJ,UAASO,kBAAiBD,iBAExE,OACE,6BACE,yBAAKoB,UAAU,mBACb,yBAAKA,UAAU,yBACb,kBAACJ,EAAA,EAAD,CACEK,eAAe,wCACfE,eAAe,gBACfO,YAAY,iBACZN,MAAOhD,EACPkD,SAAUY,KAAK0E,uBAInB,yBAAK5F,UAAU,4BAEf,4BACEA,UAAU,6BACV+C,QAAS7B,KAAKc,eACdmB,SAAUlB,IAAakE,GAHzB,eASF,kBAACC,EAAA,EAAD,CAAWlD,GAAIjB,GACb,yBAAKjC,UAAU,YACb,4BAAQA,UAAU,sCAAsC+C,QAAS7B,KAAKc,gBACpE,uBAAGhC,UAAU,iBAEf,+CACA,yBAAKA,UAAU,kBACb,kBAACqG,EAAA,EAAD,CAAYC,WAAYpF,KAAK4E,eAAgB9F,UAAU,iBACtDkB,KAAKjE,MAAM+I,eACV,4BAAQhG,UAAU,8BAA8BE,KAAK,SAAS6C,QAAS7B,KAAK+E,iBAA5E,kBAQR,yBAAKjG,UAAU,oBACb,2BAAOA,UAAU,gDACf,+BACE,4BACE,6BACA,qCACA,qCACA,oCACA,kBAAC,EAAD,CAAmBgE,cAAenF,GAChC,2CAEDwG,GAAe,6BAChB,wBAAIxC,MAAO,CAAEC,MAAO,UAGxB,+BACGxE,GACCA,EAAQsF,KAAI,SAAArF,GAAM,OAChB,kBAAC,EAAD,CACEqE,IAAKrE,EAAOU,OACZV,OAAQA,EACR8G,YAAaA,EACbxG,gBAAiBA,EACjB8F,wBAAyBwB,gB,2BA1G7C,GAAiCrC,iBA6HjC,IAAMrC,EAAqB,CACzByE,kBACAL,0BAGanE,uBAbf,SAAyBzE,GACvB,MAAO,CACLG,kBAAmBD,YAAqBF,EAAMW,MAC9CiB,gBAAiBF,IAAOE,gBACxBD,aAAc2H,IAAWR,QASWtE,EAAzBC,CAA6CiE,I,wwBCzJrD,SAASa,IACd,mDAAO,WAAMC,GAAN,sGACkBC,0BAAgBC,IAAI,oBAAqB,CAAEC,QAAS,IAAMC,KAAM,IADlF,OACCC,EADD,OAELL,EAASM,YAAYD,EAAStJ,QAFzB,2CAAP,sDAMK,SAASwJ,EAASnJ,GACvB,mDAAO,WAAM4I,GAAN,sGACkBC,0BAAgBC,IAAhB,qBAAkC9I,IADpD,OACCiJ,EADD,OAELL,EAASQ,YAAWH,IACpBL,EAASS,YAAeC,YAAcL,KAHjC,2CAAP,sDAOK,SAASM,IACd,mDAAO,WAAOX,EAAUY,GAAjB,+FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEkB8I,0BAAgBC,IAAhB,qBAAkC/I,EAAKC,GAAvC,aAFlB,OAECiJ,EAFD,OAGLL,EAASa,YAAkBR,IAHtB,2CAAP,wDAOK,SAASZ,EAAcrI,GAC5B,mDAAO,WAAO4I,EAAUY,GAAjB,6FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEC8I,0BAAgBa,KAAhB,qBAAmC3J,EAAKC,GAAxC,YAAsD,CAAEoB,OAAQpB,IAFjE,OAGL4I,EAASW,KAHJ,2CAAP,wDAOK,SAAS1C,EAAiB7G,GAC/B,mDAAO,WAAO4I,EAAUY,GAAjB,6FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEC8I,0BAAgBc,OAAhB,qBAAqC5J,EAAKC,GAA1C,oBAAwDA,IAFzD,OAGL4I,EAASW,KAHJ,2CAAP,wDAOK,SAASnG,EAAW7C,EAAcK,GACvC,mDAAO,WAAOgI,EAAUY,GAAjB,6FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEC8I,0BAAgBe,IAAhB,qBAAkC7J,EAAKC,IAAM,CAAEO,OAAMK,UAFtD,OAGLgI,EAASO,EAASpJ,EAAKC,KAHlB,2CAAP,wDAOK,SAAS8E,IACd,mDAAO,WAAO8D,EAAUY,GAAjB,+FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEkB8I,0BAAgBC,IAAhB,qBAAkC/I,EAAKC,GAAvC,YAFlB,OAECiJ,EAFD,OAGLL,EAASiB,YAAiBZ,IAHrB,2CAAP,wDAOK,SAASzE,EAAaI,GAC3B,mDAAO,WAAOgE,EAAUY,GAAjB,6FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEC8I,0BAAgBa,KAAhB,qBAAmC3J,EAAKC,GAAxC,WAAqD,CAAE4E,QAASA,IAFjE,OAGLgE,EAAS9D,KAHJ,2CAAP,wDAOK,SAASH,EAAgBC,GAC9B,mDAAO,WAAOgE,EAAUY,GAAjB,6FACCzJ,EAAOyJ,IAAWzJ,KAAKA,KADxB,SAEC8I,0BAAgBc,OAAhB,qBAAqC5J,EAAKC,GAA1C,mBAAuD8J,mBAAmBlF,KAF3E,OAGLgE,EAAS9D,KAHJ,2CAAP,wDAOK,SAASiF,EAAW/J,GACzB,mDAAO,WAAM4I,GAAN,gGACCC,0BAAgBc,OAAhB,qBAAqC3J,IADtC,OAEL4I,EAASD,KAFJ,2CAAP,sDAMK,SAASlC,EAAiB/F,GAC/B,mDAAO,WAAMkI,GAAN,gGACCC,0BAAgBe,IAAhB,qBAAkClJ,EAAOoD,OAAzC,oBAA2DpD,EAAOU,QAAU,CAChFC,WAAYX,EAAOW,aAFhB,OAILuH,EAASW,KAJJ,2CAAP,wD,qGCnDGS,E,mzCAAAA,K,kBAAAA,E,oBAAAA,E,uBAAAA,M,KAME,IAAMC,EAAb,YACE,WAAYhI,GAAc,a,4FAAA,UACxB,wBAAMA,KA2BRiI,cAAgB,SAACC,EAAeC,GAC9B,OAAKD,IAAUC,MAIVD,IAAUC,IAIRD,EAAME,sBAAwBD,EAAMC,qBArCnB,EAwC1BC,yBAA2B,SAACC,EAAoB1J,GAS9C,OARKA,GAA2B0J,EAASC,MAAQD,EAASC,KAAKpE,UAC7DmE,EAASC,KAAKpE,SACX/F,QAAO,SAAAoK,GAAO,OAAK,EAAKP,cAAcO,EAAQC,KAAMV,EAAUW,YAC9D5E,KAAI,SAAA0E,GACHA,EAAQG,cAAe,KAItBL,GA9CP,EAAKnL,MAAQ,CACXyL,WAAW,EACXC,cAAehK,IAAOiK,YAAYC,YALZ,E,UAD5B,W,kOAAA,M,EAAA,G,EAAA,2KAWU3H,KAAK4H,YAXf,oQAeiC5H,KAAKpB,MAA1BkH,EAfZ,EAeYA,SAAUrF,EAftB,EAesBA,OAClBT,KAAKL,SAAS,CAAE6H,WAAW,IAhB/B,SAiBuB1B,EAASrF,GAjBhC,cAiBU/D,EAjBV,gBAkBUsD,KAAKpB,MAAMsH,kBAlBrB,cAmBIlG,KAAKL,SAAS,CAAE6H,WAAW,IAnB/B,kBAoBW9K,GApBX,oIAwBI,IAAMmL,EAAQ,CAAC,UAAW,WAAY,aAChCC,EAAc9H,KAAKpB,MAAMmJ,SAC/B,OAAOC,IAAEC,SAASJ,EAAOC,GAAeA,EAAcD,EAAM,KA1BhE,iCAqDarK,GAAkC,IACnCiK,EAAkBzH,KAAKjE,MAAvB0L,cACArK,EAAY4C,KAAKpB,MAAjBxB,QAGR,OAFoB4C,KAAKkI,kBAGvB,KAAKvB,EAAUW,QACb,OAAO,kBAAC,IAAD,CAAanD,YAAasD,EAAerK,QAASA,IAE3D,KAAKuJ,EAAUwB,SACb,OAAO3K,GAA2B,kBAAC,IAAD,MACpC,KAAKmJ,EAAUyB,UACb,OAAO5K,GAA2BiK,GAAiB,kBAAC,IAAD,MAGvD,OAAO,OApEX,+BAuEW,MAC4DzH,KAAKpB,MAAhElC,EADD,EACCA,KAAMwK,EADP,EACOA,SAAU9J,EADjB,EACiBA,QAASO,EAD1B,EAC0BA,gBAAiBD,EAD3C,EAC2CA,aAC5CuH,EAAczH,YAAwB,CAAEJ,UAASO,kBAAiBD,iBAExE,OACE,kBAAC,IAAD,CAAMwJ,SAAUlH,KAAKiH,yBAAyBC,EAAUjC,IACtD,kBAAC,IAAKoD,SAAN,CAAeb,UAAWxH,KAAKjE,MAAMyL,WAClC9K,GAAqC,IAA7B4L,OAAOC,KAAK7L,GAAMH,QAAgByD,KAAKwI,WAAWvD,U,2BA9ErE,GAA+BrC,iBAwG/B,IAAMrC,EAAqB,CACzBuF,aACAI,qBAGauC,wBAAIC,EAAJD,CAAYjI,mBAxB3B,SAAyBzE,GACvB,IAAM0E,EAASC,YAAiB3E,EAAM4E,UAChCoH,EAAWY,YAAmB5M,EAAM4E,WAAa,UACjDiI,EAAiBC,YAAkBd,GAKzC,MAAO,CACLb,SALe4B,YAAY/M,EAAMgN,SAAP,eAAyBhB,EAAzB,YAAqCtH,GAAUmI,GAMzEnI,OAAQA,EACRsH,SAAUA,EACVrL,KAPWF,YAAQT,EAAMW,KAAM+D,GAQ/BrD,QAPcD,YAAepB,EAAMW,MAQnCiB,gBAAiBF,IAAOE,gBACxBD,aAAc2H,IAAWR,QASuBtE,EAAzBC,CAA6CoG,K,2DCtJxE,gGAIO,SAASX,EAAcvJ,GAC5B,IAAMwK,EAAW,CACf8B,IAAKtM,EAAK2H,UACV1H,GAAI,QAAUD,EAAKC,GACnBsM,SAAU,4BACVC,IAAK,GACL7B,KAAM3K,EAAKQ,KACXiM,YAAa,CAAC,CAAE/G,MAAO,QAAS8G,IAAK,cACrCnG,SAAU,CACR,CACEqG,QAAQ,EACRC,KAAM,mBACN1M,GAAI,gBAAF,OAAkBD,EAAKC,IACzB0K,KAAM,UACN6B,IAAK,kBAAF,OAAoBxM,EAAKC,GAAzB,aAEL,CACEyM,QAAQ,EACRC,KAAM,sBACN1M,GAAI,iBAAF,OAAmBD,EAAKC,IAC1B0K,KAAM,WACN6B,IAAK,kBAAF,OAAoBxM,EAAKC,GAAzB,gBAeT,OAVIc,IAAOiK,YAAYC,YACrBT,EAASnE,SAASuG,KAAK,CACrBF,QAAQ,EACRC,KAAM,sBACN1M,GAAI,kBAAF,OAAoBD,EAAKC,IAC3B0K,KAAM,sBACN6B,IAAK,kBAAF,OAAoBxM,EAAKC,GAAzB,gBAIAuK,EAGF,SAAS2B,EAAkBd,GAChC,IASIwB,EATEpC,EAAOlB,EAAc,CACzB5B,UAAW,8BACX1H,GAAI,EACJO,KAAM,UACNK,MAAO,UACPiM,YAAa,EACbxL,WAAYC,sBAAoBC,SAP0B,uBAa5D,YAAoBiJ,EAAKpE,SAAzB,+CAAmC,KAAxB0G,EAAwB,QACjC,GAAIA,EAAM9M,GAAG+M,QAAQ3B,GAAY,EAAG,CAClC0B,EAAML,QAAS,EACfG,EAAOE,EACP,QAjBwD,kFAqB5D,MAAO,CACLtC,KAAMA,EACNoC,KAAMA","file":"TeamPages.898fe9e20a782b4232fe.js","sourcesContent":["import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter(team => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter(member => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find(m => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FormLabel, Input } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { getTeam } from './state/selectors';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  team: Team;\n  updateTeam: typeof updateTeam;\n}\n\ninterface State {\n  name: string;\n  email: string;\n}\n\nexport class TeamSettings extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      name: props.team.name,\n      email: props.team.email,\n    };\n  }\n\n  onChangeName = (event: any) => {\n    this.setState({ name: event.target.value });\n  };\n\n  onChangeEmail = (event: any) => {\n    this.setState({ email: event.target.value });\n  };\n\n  onUpdate = (event: any) => {\n    const { name, email } = this.state;\n    event.preventDefault();\n    this.props.updateTeam(name, email);\n  };\n\n  render() {\n    const { team } = this.props;\n    const { name, email } = this.state;\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Team Settings</h3>\n        <form name=\"teamDetailsForm\" className=\"gf-form-group\" onSubmit={this.onUpdate}>\n          <div className=\"gf-form max-width-30\">\n            <FormLabel>Name</FormLabel>\n            <Input\n              type=\"text\"\n              required\n              value={name}\n              className=\"gf-form-input max-width-22\"\n              onChange={this.onChangeName}\n            />\n          </div>\n\n          <div className=\"gf-form max-width-30\">\n            <FormLabel tooltip=\"This is optional and is primarily used to set the team profile avatar (via gravatar service)\">\n              Email\n            </FormLabel>\n            <Input\n              type=\"email\"\n              className=\"gf-form-input max-width-22\"\n              value={email}\n              placeholder=\"team@email.com\"\n              onChange={this.onChangeEmail}\n            />\n          </div>\n\n          <div className=\"gf-form-button-row\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Update\n            </button>\n          </div>\n        </form>\n        <SharedPreferences resourceUri={`teams/${team.id}`} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n\n  return {\n    team: getTeam(state.team, teamId),\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSettings);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { Input, Tooltip } from '@grafana/ui';\n\nimport { TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nexport interface Props {\n  groups: TeamGroup[];\n  loadTeamGroups: typeof loadTeamGroups;\n  addTeamGroup: typeof addTeamGroup;\n  removeTeamGroup: typeof removeTeamGroup;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId?: string;\n}\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <a className=\"btn btn-danger btn-small\" onClick={() => this.onRemoveGroup(group)}>\n            <i className=\"fa fa-remove\" />\n          </a>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const groups = this.props.groups;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">External group sync</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <div className=\"page-sub-heading-icon\">\n              <i className=\"gicon gicon-question gicon--has-hover\" />\n            </div>\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <button className=\"btn btn-primary pull-right\" onClick={this.onToggleAdding}>\n              <i className=\"fa fa-plus\" /> Add group\n            </button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <i className=\"fa fa-close\" />\n            </button>\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" disabled={!this.isNewGroupValid()}>\n                  Add group\n                </button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"gicon gicon-team\"\n            title=\"There are no external groups to sync with\"\n            buttonTitle=\"Add Group\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"Learn more\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map(group => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Select, DeleteButton } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nexport interface Props {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n  removeTeamMember?: typeof removeTeamMember;\n  updateTeamMember?: typeof updateTeamMember;\n}\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember = { ...member, permission };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find(dp => dp.value === member.permission);\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={item => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img className=\"filter-table__avatar\" src={member.avatarUrl} />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton size=\"sm\" disabled={!signedInUserIsTeamAdmin} onConfirm={() => this.onRemoveMember(member)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {};\n}\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, User } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv, User as SignedInUser } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\n\nexport interface Props {\n  members: TeamMember[];\n  searchMemberQuery: string;\n  addTeamMember: typeof addTeamMember;\n  setSearchMemberQuery: typeof setSearchMemberQuery;\n  syncEnabled: boolean;\n  editorsCanAdmin?: boolean;\n  signedInUser?: SignedInUser;\n}\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: User;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: User) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n              inputClassName=\"gf-form-input\"\n              placeholder=\"Search members\"\n              value={searchMemberQuery}\n              onChange={this.onSearchQueryChange}\n            />\n          </div>\n\n          <div className=\"page-action-bar__spacer\" />\n\n          <button\n            className=\"btn btn-primary pull-right\"\n            onClick={this.onToggleAdding}\n            disabled={isAdding || !isTeamAdmin}\n          >\n            Add member\n          </button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <i className=\"fa fa-close\" />\n            </button>\n            <h5>Add team member</h5>\n            <div className=\"gf-form-inline\">\n              <UserPicker onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map(member => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { Team, TeamMember } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId, getRouteParamsPage } from '../../core/selectors/location';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  team: Team;\n  loadTeam: typeof loadTeam;\n  loadTeamMembers: typeof loadTeamMembers;\n  teamId: number;\n  pageName: string;\n  navModel: NavModel;\n  members?: TeamMember[];\n  editorsCanAdmin?: boolean;\n  signedInUser?: User;\n}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: config.licenseInfo.hasLicense,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    await this.props.loadTeamMembers();\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return _.includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter(navItem => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map(navItem => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean) {\n    const { isSyncEnabled } = this.state;\n    const { members } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n\n      case PageTypes.Settings:\n        return isSignedInUserTeamAdmin && <TeamSettings />;\n      case PageTypes.GroupSync:\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n  const pageName = getRouteParamsPage(state.location) || 'members';\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const team = getTeam(state.team, teamId);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TeamPages));\n","import { Team, TeamPermissionLevel } from 'app/types';\nimport config from 'app/core/config';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members & settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      {\n        active: false,\n        icon: 'gicon gicon-team',\n        id: `team-members-${team.id}`,\n        text: 'Members',\n        url: `org/teams/edit/${team.id}/members`,\n      },\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-refresh',\n      id: `team-groupsync-${team.id}`,\n      text: 'External group sync',\n      url: `org/teams/edit/${team.id}/groupsync`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel({\n    avatarUrl: 'public/img/user_profile.png',\n    id: 1,\n    name: 'Loading',\n    email: 'loading',\n    memberCount: 0,\n    permission: TeamPermissionLevel.Member,\n  });\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n"],"sourceRoot":""}