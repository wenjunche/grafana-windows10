{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderSettingsPage.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","dispatch","backendSrv","folder","loadFolder","updateNavIndex","buildNavModel","saveFolder","put","title","version","res","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","url","deleteFolder","getFolderPermissions","get","permissions","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","push","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","FolderSettingsPage","props","onTitleChange","evt","setFolderTitle","target","value","onSave","preventDefault","stopPropagation","setState","isLoading","onDelete","CoreEvents","showConfirmModal","text","icon","yesText","onConfirm","state","this","folderUid","navModel","Contents","className","name","onSubmit","type","onChange","disabled","canSave","hasChanged","onClick","PureComponent","mapDispatchToProps","hot","module","connect","location","routeParams","getNavModel","navIndex","getLoadingNav","id","subTitle","breadcrumbs","children","active","tabIndex","main","node"],"mappings":"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","file":"FolderSettingsPage.898fe9e20a782b4232fe.js","sourcesContent":["import { AppEvents } from '@grafana/data';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\n\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async dispatch => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n\n    dispatch(updateLocation({ path: `${res.url}/settings` }));\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    await backendSrv.deleteFolder(uid, true);\n    dispatch(updateLocation({ path: `dashboards` }));\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { Input } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { CoreEvents, FolderState, StoreState } from 'app/types';\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { setFolderTitle } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  folderUid: string;\n  folder: FolderState;\n  getFolderByUid: typeof getFolderByUid;\n  setFolderTitle: typeof setFolderTitle;\n  saveFolder: typeof saveFolder;\n  deleteFolder: typeof deleteFolder;\n}\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class FolderSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n  }\n\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.setFolderTitle(evt.target.value);\n  };\n\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.setState({ isLoading: true });\n    await this.props.saveFolder(this.props.folder);\n    this.setState({ isLoading: false });\n  };\n\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: `Do you want to delete this folder and all its dashboards?`,\n      icon: 'fa-trash',\n      yesText: 'Delete',\n      onConfirm: () => {\n        this.props.deleteFolder(this.props.folder.uid);\n      },\n    });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          <h3 className=\"page-sub-heading\">Folder Settings</h3>\n\n          <div className=\"section gf-form-group\">\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\n              <div className=\"gf-form\">\n                <label className=\"gf-form-label width-7\">Name</label>\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={folder.title}\n                  onChange={this.onTitleChange}\n                />\n              </div>\n              <div className=\"gf-form-button-row\">\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!folder.canSave || !folder.hasChanged}>\n                  Save\n                </button>\n                <button className=\"btn btn-danger\" onClick={this.onDelete} disabled={!folder.canSave}>\n                  Delete\n                </button>\n              </div>\n            </form>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const uid = state.location.routeParams.uid;\n\n  return {\n    navModel: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  saveFolder,\n  setFolderTitle,\n  deleteFolder,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderSettingsPage));\n","import { FolderDTO } from 'app/types';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  return {\n    icon: 'fa fa-folder-open',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards & permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-th-large',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n      {\n        active: false,\n        icon: 'fa fa-fw fa-lock',\n        id: `folder-permissions-${folder.uid}`,\n        text: 'Permissions',\n        url: `${folder.url}/permissions`,\n      },\n      {\n        active: false,\n        icon: 'gicon gicon-cog',\n        id: `folder-settings-${folder.uid}`,\n        text: 'Settings',\n        url: `${folder.url}/settings`,\n      },\n    ],\n  };\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: false,\n    version: 0,\n  });\n\n  main.children[tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children[tabIndex],\n  };\n}\n"],"sourceRoot":""}