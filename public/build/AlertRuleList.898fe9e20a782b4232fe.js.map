{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","FilterInput","forwardRef","props","ref","className","labelClassName","type","inputClassName","value","unEscapeStringFromRegex","onChange","event","escapeStringForRegex","target","placeholder","AlertRuleList","stateFilters","text","onStateFilterChanged","evt","updateLocation","onOpenHowTo","appEvents","emit","CoreEvents","showModal","src","modalClass","model","onSearchQueryChange","setSearchQuery","onTogglePause","rule","paused","alertStateFilterOption","key","this","fetchRules","prevProps","getStateFilter","navModel","alertRules","search","isLoading","Contents","map","onClick","PureComponent","mapDispatchToProps","hot","module","connect","getNavModel","navIndex","getAlertRuleItems","getSearchQuery","AlertRuleItem","highlightClassName","textToHighlight","searchWords","iconClassName","classNames","fa","ruleUrl","url","panelId","stateClass","stateIcon","href","renderText","name","stateText","stateAge","info","title","searchQuery","regex","RegExp","items","filter","item","test"],"mappings":"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","file":"AlertRuleList.898fe9e20a782b4232fe.js","sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\nimport { AlertRuleDTO, ThunkResult } from 'app/types';\nimport { loadAlertRules, loadedAlertRules } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { updateLocation } from 'app/core/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, CoreEvents, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { NavModel } from '@grafana/data';\nimport { setSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  alertRules: AlertRule[];\n  updateLocation: typeof updateLocation;\n  getAlertRulesAsync: typeof getAlertRulesAsync;\n  setSearchQuery: typeof setSearchQuery;\n  togglePauseAlertRule: typeof togglePauseAlertRule;\n  stateFilter: string;\n  search: string;\n  isLoading: boolean;\n}\n\nexport class AlertRuleList extends PureComponent<Props, any> {\n  stateFilters = [\n    { text: 'All', value: 'all' },\n    { text: 'OK', value: 'ok' },\n    { text: 'Not OK', value: 'not_ok' },\n    { text: 'Alerting', value: 'alerting' },\n    { text: 'No Data', value: 'no_data' },\n    { text: 'Paused', value: 'paused' },\n    { text: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.stateFilter !== this.props.stateFilter) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    const { stateFilter } = this.props;\n    if (stateFilter) {\n      return stateFilter.toString();\n    }\n    return 'all';\n  }\n\n  onStateFilterChanged = (evt: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.updateLocation({\n      query: { state: evt.target.value },\n    });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/alerting/partials/alert_howto.html',\n      modalClass: 'confirm-modal',\n      model: {},\n    });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n                inputClassName=\"gf-form-input\"\n                placeholder=\"Search alerts\"\n                value={search}\n                onChange={this.onSearchQueryChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"gf-form-select-wrapper width-13\">\n                <select className=\"gf-form-input\" onChange={this.onStateFilterChanged} value={this.getStateFilter()}>\n                  {this.stateFilters.map(this.alertStateFilterOption)}\n                </select>\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </a>\n          </div>\n          <section>\n            <ol className=\"alert-rule-list\">\n              {alertRules.map(rule => (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              ))}\n            </ol>\n          </section>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'alert-list'),\n  alertRules: getAlertRuleItems(state.alertRules),\n  stateFilter: state.location.query.state,\n  search: getSearchQuery(state.alertRules),\n  isLoading: state.alertRules.isLoading,\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(AlertRuleList));\n","import React, { PureComponent } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport classNames from 'classnames';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nclass AlertRuleItem extends PureComponent<Props> {\n  renderText(text: string) {\n    return (\n      <Highlighter\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[this.props.search]}\n      />\n    );\n  }\n\n  render() {\n    const { rule, onTogglePause } = this.props;\n\n    const iconClassName = classNames({\n      fa: true,\n      'fa-play': rule.state === 'paused',\n      'fa-pause': rule.state !== 'paused',\n    });\n\n    const ruleUrl = `${rule.url}?panelId=${rule.panelId}&fullscreen&edit&tab=alert`;\n\n    return (\n      <li className=\"alert-rule-item\">\n        <span className={`alert-rule-item__icon ${rule.stateClass}`}>\n          <i className={rule.stateIcon} />\n        </span>\n        <div className=\"alert-rule-item__body\">\n          <div className=\"alert-rule-item__header\">\n            <div className=\"alert-rule-item__name\">\n              <a href={ruleUrl}>{this.renderText(rule.name)}</a>\n            </div>\n            <div className=\"alert-rule-item__text\">\n              <span className={`${rule.stateClass}`}>{this.renderText(rule.stateText)}</span>\n              <span className=\"alert-rule-item__time\"> for {rule.stateAge}</span>\n            </div>\n          </div>\n          {rule.info && <div className=\"small muted alert-rule-item__info\">{this.renderText(rule.info)}</div>}\n        </div>\n\n        <div className=\"alert-rule-item__actions\">\n          <button\n            className=\"btn btn-small btn-inverse alert-list__btn width-2\"\n            title=\"Pausing an alert rule prevents it from executing\"\n            onClick={onTogglePause}\n          >\n            <i className={iconClassName} />\n          </button>\n          <a className=\"btn btn-small btn-inverse alert-list__btn width-2\" href={ruleUrl} title=\"Edit alert rule\">\n            <i className=\"gicon gicon-cog\" />\n          </a>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default AlertRuleItem;\n","import { AlertRulesState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: AlertRulesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.items.filter(item => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info);\n  });\n};\n"],"sourceRoot":""}