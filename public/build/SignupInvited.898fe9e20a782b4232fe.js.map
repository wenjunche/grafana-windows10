{"version":3,"sources":["webpack:///./node_modules/react-use/esm/useAsyncFn.js","webpack:///./node_modules/react-use/esm/useMountedState.js","webpack:///./node_modules/react-use/esm/useAsync.js","webpack:///./public/app/features/users/SignupInvited.tsx"],"names":["useAsyncFn","fn","deps","initialState","loading","mountedRef","get","_a","state","set","isMounted","current","args","_i","arguments","length","apply","then","value","error","useAsync","callback","navModel","main","icon","text","subTitle","breadcrumbs","title","url","node","mapDispatchToProps","updateLocation","hot","module","connect","code","location","routeParams","useState","initFormModel","setInitFormModel","greeting","setGreeting","invitedBy","setInvitedBy","getBackendSrv","invite","email","name","username","onSubmit","formData","post","inviteCode","window","href","getConfig","appSubUrl","Contents","className","contextSrv","user","orgName","Form","defaultValues","register","errors","Field","invalid","message","label","Input","size","placeholder","ref","required","pattern","password","type","Button"],"mappings":"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","file":"SignupInvited.898fe9e20a782b4232fe.js","sourcesContent":["import { useCallback, useState } from 'react';\nimport useMountedState from './useMountedState';\nexport default function useAsyncFn(fn, deps, initialState) {\n    if (deps === void 0) { deps = []; }\n    if (initialState === void 0) { initialState = { loading: false }; }\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var isMounted = useMountedState();\n    var callback = useCallback(function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        set({ loading: true });\n        return fn.apply(void 0, args).then(function (value) {\n            isMounted() && set({ value: value, loading: false });\n            return value;\n        }, function (error) {\n            isMounted() && set({ error: error, loading: false });\n            return error;\n        });\n    }, deps);\n    return [state, callback];\n}\n","import { useCallback, useEffect, useRef } from 'react';\nexport default function useMountedState() {\n    var mountedRef = useRef(false);\n    var get = useCallback(function () { return mountedRef.current; }, []);\n    useEffect(function () {\n        mountedRef.current = true;\n        return function () {\n            mountedRef.current = false;\n        };\n    });\n    return get;\n}\n","import { useEffect } from 'react';\nimport useAsyncFn from './useAsyncFn';\nexport default function useAsync(fn, deps) {\n    if (deps === void 0) { deps = []; }\n    var _a = useAsyncFn(fn, deps, {\n        loading: true,\n    }), state = _a[0], callback = _a[1];\n    useEffect(function () {\n        callback();\n    }, [callback]);\n    return state;\n}\n","import React, { FC, useState } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, MapStateToProps, MapDispatchToProps } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { updateLocation } from 'app/core/actions';\nimport { UrlQueryValue, getBackendSrv } from '@grafana/runtime';\nimport { Forms } from '@grafana/ui';\nimport { useAsync } from 'react-use';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getConfig } from 'app/core/config';\n\ninterface ConnectedProps {\n  code?: UrlQueryValue;\n}\n\ninterface DispatchProps {\n  updateLocation: typeof updateLocation;\n}\n\ninterface FormModel {\n  email: string;\n  name?: string;\n  username: string;\n  password?: string;\n}\n\nconst navModel = {\n  main: {\n    icon: 'gicon gicon-branding',\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{ title: 'Login', url: 'login' }],\n  },\n  node: {\n    text: '',\n  },\n};\n\nconst SingupInvitedPageUnconnected: FC<DispatchProps & ConnectedProps> = ({ code }) => {\n  const [initFormModel, setInitFormModel] = useState<FormModel>();\n  const [greeting, setGreeting] = useState<string>();\n  const [invitedBy, setInvitedBy] = useState<string>();\n  useAsync(async () => {\n    const invite = await getBackendSrv().get('/api/user/invite/' + code);\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email,\n    });\n\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, []);\n\n  const onSubmit = async (formData: FormModel) => {\n    await getBackendSrv().post('/api/user/invite/complete', { ...formData, inviteCode: code });\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Hello {greeting || 'there'}.</h3>\n\n        <div className=\"modal-tagline p-b-2\">\n          <em>{invitedBy || 'Someone'}</em> has invited you to join Grafana and the organization{' '}\n          <span className=\"highlight-word\">{contextSrv.user.orgName}</span>\n          <br />\n          Please complete the following and choose a password to accept your invitation and continue:\n        </div>\n        <Forms.Form defaultValues={initFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Forms.Field invalid={!!errors.email} error={!!errors.email && errors.email.message} label=\"Email\">\n                <Forms.Input\n                  size=\"md\"\n                  placeholder=\"email@example.com\"\n                  name=\"email\"\n                  ref={register({\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^\\S+@\\S+$/,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                />\n              </Forms.Field>\n              <Forms.Field invalid={!!errors.name} error={!!errors.name && errors.name.message} label=\"Name\">\n                <Forms.Input size=\"md\" placeholder=\"Name (optional)\" name=\"name\" ref={register} />\n              </Forms.Field>\n              <Forms.Field\n                invalid={!!errors.username}\n                error={!!errors.username && errors.username.message}\n                label=\"Username\"\n              >\n                <Forms.Input\n                  size=\"md\"\n                  placeholder=\"Username\"\n                  name=\"username\"\n                  ref={register({ required: 'Username is required' })}\n                />\n              </Forms.Field>\n              <Forms.Field\n                invalid={!!errors.password}\n                error={!!errors.password && errors.password.message}\n                label=\"Password\"\n              >\n                <Forms.Input\n                  size=\"md\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  ref={register({ required: 'Password is required' })}\n                />\n              </Forms.Field>\n\n              <Forms.Button type=\"submit\">Sign Up</Forms.Button>\n            </>\n          )}\n        </Forms.Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  code: state.location.routeParams.code,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = {\n  updateLocation,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(SingupInvitedPageUnconnected));\n"],"sourceRoot":""}