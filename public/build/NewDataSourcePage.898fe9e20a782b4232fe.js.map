{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","plugin","find","item","info","links","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","log","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","filter","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","FilterInput","forwardRef","props","ref","className","labelClassName","inputClassName","value","unEscapeStringFromRegex","onChange","event","escapeStringForRegex","target","placeholder","NewDataSourcePage","onDataSourceTypeClicked","onSearchQueryChange","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","this","searchInput","focus","items","getItemKey","toString","renderItem","DataSourceTypeCard","onClick","map","key","renderPlugins","href","rel","navModel","isLoading","searchQuery","Contents","elem","renderCategories","PureComponent","isPhantom","learnMoreLink","mainClassName","classNames","aria-label","e2e","pages","AddDataSource","selectors","dataSourcePlugins","src","getNavModel","main","icon","text","subTitle","node","mapDispatchToProps","hot","connect","state","getDataSourcePlugins","dataSourceTypeSearchQuery","isLoadingDataSources","pluginMeta","meta","img","breadcrumbs","children","active","configPages","page","includes","undefined","include","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","child","indexOf","getDataSources","regex","RegExp","test","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount"],"mappings":"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","file":"NewDataSourcePage.898fe9e20a782b4232fe.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ];\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.log('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { FC, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { List } from '@grafana/ui';\nimport { e2e } from '@grafana/e2e';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  searchInput: HTMLElement;\n\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n    this.searchInput.focus();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <a\n            className=\"btn btn-inverse\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </a>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                ref={elem => (this.searchInput = elem)}\n                labelClassName=\"gf-form--has-input-icon\"\n                inputClassName=\"gf-form-input width-30\"\n                value={searchQuery}\n                onChange={this.onSearchQueryChange}\n                placeholder=\"Filter by name or type\"\n              />\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" href=\"datasources\">\n              Cancel\n            </a>\n          </div>\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\n  const mainClassName = classNames('add-data-source-item', {\n    'add-data-source-item--phantom': isPhantom,\n  });\n\n  return (\n    <div\n      className={mainClassName}\n      onClick={onClick}\n      aria-label={e2e.pages.AddDataSource.selectors.dataSourcePlugins(plugin.name)}\n    >\n      <img className=\"add-data-source-item-logo\" src={plugin.info.logos.small} />\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{plugin.name}</span>\n        {plugin.info.description && <span className=\"add-data-source-item-desc\">{plugin.info.description}</span>}\n      </div>\n      <div className=\"add-data-source-item-actions\">\n        {learnMoreLink && (\n          <a\n            className=\"btn btn-inverse\"\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            target=\"_blank\"\n            rel=\"noopener\"\n            onClick={onLearnMoreClick}\n          >\n            {learnMoreLink.name} <i className=\"fa fa-external-link add-datasource-item-actions__btn-icon\" />\n          </a>\n        )}\n        {!isPhantom && <button className=\"btn btn-primary\">Select</button>}\n      </div>\n    </div>\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'gicon gicon-add-datasources',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-th-large',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as GenericDataSourcePlugin\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}