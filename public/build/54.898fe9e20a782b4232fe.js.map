{"version":3,"sources":["webpack:///./public/app/core/components/PasswordInput/PasswordInput.tsx","webpack:///./public/app/features/profile/ChangePasswordForm.tsx","webpack:///./public/app/features/profile/ChangePasswordPage.tsx"],"names":["PasswordInput","forwardRef","props","ref","className","label","type","onChange","event","target","value","ChangePasswordForm","state","oldPassword","newPassword","confirmNew","onOldPasswordChange","setState","onNewPasswordChange","onConfirmPasswordChange","onSubmitChangePassword","preventDefault","onChangePassword","this","isSaving","ldapEnabled","config","authProxyEnabled","name","variant","onClick","disabled","href","appSubUrl","PureComponent","ChangePasswordPage","navModel","states","changePassword","Contents","hot","module","connect","getNavModel","navIndex"],"mappings":"6IASaA,EAAgBC,sBAAoC,SAACC,EAAOC,GAAR,OAC/D,oCACE,kBAAC,YAAD,CAAWC,UAAU,WAAWF,EAAMG,OACtC,kBAAC,QAAD,CACED,UAAU,6BACVE,KAAK,WACLC,SAAU,SAACC,GAAD,OAA0CN,EAAMK,SAASC,EAAMC,OAAOC,QAChFA,MAAOR,EAAMQ,Y,8lDCCZ,IAAMC,EAAb,6KACEC,MAAe,CACbC,YAAa,GACbC,YAAa,GACbC,WAAY,IAJhB,EAOEC,oBAAsB,SAACH,GACrB,EAAKI,SAAS,CAAEJ,iBARpB,EAWEK,oBAAsB,SAACJ,GACrB,EAAKG,SAAS,CAAEH,iBAZpB,EAeEK,wBAA0B,SAACJ,GACzB,EAAKE,SAAS,CAAEF,gBAhBpB,EAmBEK,uBAAyB,SAACZ,GACxBA,EAAMa,iBACN,EAAKnB,MAAMoB,iBAAX,KAAiC,EAAKV,SArB1C,E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCAwBW,MAC0CW,KAAKX,MAA9CC,EADD,EACCA,YAAaC,EADd,EACcA,YAAaC,EAD3B,EAC2BA,WAC1BS,EAAaD,KAAKrB,MAAlBsB,SACAC,EAAkCC,IAAlCD,YAAaE,EAAqBD,IAArBC,iBAErB,OAAIF,GAAeE,EACV,4GAIP,0BAAMC,KAAK,WAAWxB,UAAU,iBAC9B,yBAAKA,UAAU,wBACb,kBAACJ,EAAD,CAAeK,MAAM,eAAeE,SAAUgB,KAAKP,oBAAqBN,MAAOG,KAEjF,yBAAKT,UAAU,wBACb,kBAACJ,EAAD,CAAeK,MAAM,eAAeE,SAAUgB,KAAKL,oBAAqBR,MAAOI,KAEjF,yBAAKV,UAAU,wBACb,kBAACJ,EAAD,CAAeK,MAAM,mBAAmBE,SAAUgB,KAAKJ,wBAAyBT,MAAOK,KAEzF,yBAAKX,UAAU,sBACb,kBAAC,SAAD,CAAQyB,QAAQ,UAAUC,QAASP,KAAKH,uBAAwBW,SAAUP,GAA1E,mBAGA,kBAAC,aAAD,CAAYK,QAAQ,cAAcG,KAAI,UAAKN,IAAOO,UAAZ,aAAtC,iB,2BAhDV,GAAwCC,kB,8kCCHjC,IAAMC,EAAb,6E,UAAA,O,kOAAA,M,EAAA,G,EAAA,gCACW,IACCC,EAAab,KAAKrB,MAAlBkC,SACR,OACE,kBAAC,IAAD,CAAMA,SAAUA,GACd,kBAAC,IAAD,MACG,WAAqBC,GAArB,IAAGC,EAAH,EAAGA,eAAH,OACC,kBAAC,IAAKC,SAAN,KACE,wBAAInC,UAAU,oBAAd,wBACA,kBAAC,IAAD,CAAoBkB,iBAAkBgB,EAAgBd,SAAUa,EAAOC,2B,2BATrF,GAAwCJ,iBA0BzBM,wBAAIC,EAAJD,CAAYE,mBAR3B,SAAyB9B,GACvB,MAAO,CACLwB,SAAUO,YAAY/B,EAAMgC,SAAP,sBAIE,GAEAF,CAA6CP,K","file":"54.898fe9e20a782b4232fe.js","sourcesContent":["import React, { ChangeEvent, forwardRef } from 'react';\nimport { Input, FormLabel } from '@grafana/ui';\n\nexport interface Props {\n  label: string;\n  value: string | undefined;\n  onChange: (value: string) => void;\n}\n\nexport const PasswordInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <>\n    <FormLabel className=\"width-8\">{props.label}</FormLabel>\n    <Input\n      className=\"gf-form-input max-width-22\"\n      type=\"password\"\n      onChange={(event: ChangeEvent<HTMLInputElement>) => props.onChange(event.target.value)}\n      value={props.value}\n    />\n  </>\n));\n","import React, { PureComponent, MouseEvent } from 'react';\nimport config from 'app/core/config';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { ChangePasswordFields } from 'app/core/utils/UserProvider';\nimport { PasswordInput } from 'app/core/components/PasswordInput/PasswordInput';\n\nexport interface Props {\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport interface State {\n  oldPassword: string;\n  newPassword: string;\n  confirmNew: string;\n}\n\nexport class ChangePasswordForm extends PureComponent<Props, State> {\n  state: State = {\n    oldPassword: '',\n    newPassword: '',\n    confirmNew: '',\n  };\n\n  onOldPasswordChange = (oldPassword: string) => {\n    this.setState({ oldPassword });\n  };\n\n  onNewPasswordChange = (newPassword: string) => {\n    this.setState({ newPassword });\n  };\n\n  onConfirmPasswordChange = (confirmNew: string) => {\n    this.setState({ confirmNew });\n  };\n\n  onSubmitChangePassword = (event: MouseEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    this.props.onChangePassword({ ...this.state });\n  };\n\n  render() {\n    const { oldPassword, newPassword, confirmNew } = this.state;\n    const { isSaving } = this.props;\n    const { ldapEnabled, authProxyEnabled } = config;\n\n    if (ldapEnabled || authProxyEnabled) {\n      return <p>You cannot change password when ldap or auth proxy authentication is enabled.</p>;\n    }\n\n    return (\n      <form name=\"userForm\" className=\"gf-form-group\">\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"Old Password\" onChange={this.onOldPasswordChange} value={oldPassword} />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"New Password\" onChange={this.onNewPasswordChange} value={newPassword} />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"Confirm Password\" onChange={this.onConfirmPasswordChange} value={confirmNew} />\n        </div>\n        <div className=\"gf-form-button-row\">\n          <Button variant=\"primary\" onClick={this.onSubmitChangePassword} disabled={isSaving}>\n            Change Password\n          </Button>\n          <LinkButton variant=\"transparent\" href={`${config.appSubUrl}/profile`}>\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ChangePasswordForm;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { UserProvider } from 'app/core/utils/UserProvider';\nimport Page from 'app/core/components/Page/Page';\nimport { ChangePasswordForm } from './ChangePasswordForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport class ChangePasswordPage extends PureComponent<Props> {\n  render() {\n    const { navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <UserProvider>\n          {({ changePassword }, states) => (\n            <Page.Contents>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n              <ChangePasswordForm onChangePassword={changePassword} isSaving={states.changePassword} />\n            </Page.Contents>\n          )}\n        </UserProvider>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, `change-password`),\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage));\n"],"sourceRoot":""}