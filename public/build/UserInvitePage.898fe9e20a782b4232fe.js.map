{"version":3,"sources":["webpack:///./public/app/features/org/UserInvitePage.tsx","webpack:///./public/app/features/org/UserInviteForm.tsx"],"names":["UserInvitePage","navModel","Contents","className","contextSrv","user","orgName","hot","module","connect","state","getNavModel","navIndex","roles","label","value","OrgRole","Viewer","Editor","Admin","mapDispatchToProps","updateLocation","onSubmit","formData","getBackendSrv","post","appEvents","emit","AppEvents","alertError","message","path","defaultValues","name","email","role","sendEmail","Form","register","control","errors","Field","invalid","loginOrEmail","error","Input","size","placeholder","ref","required","InputControl","as","Forms","RadioButtonGroup","options","Switch","Button","type","LinkButton","href","assureBaseUrl","getConfig","appSubUrl","variant"],"mappings":"4FAAA,mKAaaA,EAA4B,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAC1C,OACE,kBAAC,IAAD,CAAMA,SAAUA,GACd,kBAAC,IAAKC,SAAN,KACE,wBAAIC,UAAU,oBAAd,eACA,yBAAKA,UAAU,SAAf,+DAEE,0BAAMA,UAAU,kBAAhB,IAAmCC,IAAWC,KAAKC,UAErD,kBAAC,IAAD,SAUOC,wBAAIC,EAAJD,CAAYE,mBAJH,SAACC,GAAD,MAAwB,CAC9CT,SAAUU,YAAYD,EAAME,SAAU,YAGbH,CAAyBT,K,kVCpBpD,IAAMa,EAAQ,CACZ,CAAEC,MAAO,SAAUC,MAAOC,UAAQC,QAClC,CAAEH,MAAO,SAAUC,MAAOC,UAAQE,QAClC,CAAEJ,MAAO,QAASC,MAAOC,UAAQG,QAsE7BC,EAAqB,CACzBC,oBAGad,kBAAIC,EAAJD,CAAYE,kBAAQ,KAAMW,EAAdX,EA3Dc,SAAC,GAAuB,IAArBY,EAAqB,EAArBA,eACpCC,EAAQ,e,EAAA,G,EAAA,yBAAG,WAAOC,GAAP,yGAEPC,0BAAgBC,KAAK,mBAAoBF,GAFlC,sDAIbG,IAAUC,KAAKC,YAAUC,WAAY,CAAC,wBAAyB,KAAIC,UAJtD,OAMfT,EAAe,CAAEU,KAAM,eANR,uD,+KAAH,sDAQRC,EAA2B,CAC/BC,KAAM,GACNC,MAAO,GACPC,KAAMnB,UAAQE,OACdkB,WAAW,GAGb,OACE,kBAAC,QAAMC,KAAP,CAAYL,cAAeA,EAAeV,SAAUA,IACjD,YAAmC,IAAhCgB,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACrB,OACE,oCACE,kBAAC,QAAMC,MAAP,CACEC,UAAWF,EAAOG,aAClBC,QAASJ,EAAOG,cAAgB,gCAChC7B,MAAM,qBAEN,kBAAC,QAAM+B,MAAP,CACEC,KAAK,KACLb,KAAK,eACLc,YAAY,oBACZC,IAAKV,EAAS,CAAEW,UAAU,OAG9B,kBAAC,QAAMR,MAAP,CAAaC,UAAWF,EAAOP,KAAMnB,MAAM,QACzC,kBAAC,QAAM+B,MAAP,CAAaC,KAAK,KAAKb,KAAK,OAAOc,YAAY,aAAaC,IAAKV,KAEnE,kBAAC,QAAMG,MAAP,CAAaC,UAAWF,EAAOL,KAAMrB,MAAM,QACzC,kBAAC,QAAMoC,aAAP,CAAoBC,GAAIC,QAAMC,iBAAkBd,QAASA,EAASe,QAASzC,EAAOoB,KAAK,UAEzF,kBAAC,QAAMQ,MAAP,CAAaC,UAAWF,EAAOJ,UAAWtB,MAAM,qBAC9C,kBAAC,QAAMyC,OAAP,CAActB,KAAK,YAAYe,IAAKV,KAEtC,kBAAC,kBAAD,KACE,kBAAC,QAAMkB,OAAP,CAAcC,KAAK,UAAnB,UACA,kBAAC,QAAMC,WAAP,CAAkBC,KAAMC,YAAcC,cAAYC,UAAY,cAAeC,QAAQ,aAArF,mB","file":"UserInvitePage.898fe9e20a782b4232fe.js","sourcesContent":["import React, { FC } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport UserInviteForm from './UserInviteForm';\nimport { contextSrv, NavModel } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\nimport Page from 'app/core/components/Page/Page';\n\ninterface Props {\n  navModel: NavModel;\n}\n\nexport const UserInvitePage: FC<Props> = ({ navModel }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Invite User</h3>\n        <div className=\"p-b-2\">\n          Send invite or add existing Grafana user to the organization\n          <span className=\"highlight-word\"> {contextSrv.user.orgName}</span>\n        </div>\n        <UserInviteForm />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'users'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(UserInvitePage));\n","import React, { FC } from 'react';\nimport { Forms, HorizontalGroup } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { OrgRole } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { updateLocation } from 'app/core/actions';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { appEvents } from 'app/core/core';\nimport { AppEvents } from '@grafana/data';\nimport { assureBaseUrl } from 'app/core/utils/location_util';\n\nconst roles = [\n  { label: 'Viewer', value: OrgRole.Viewer },\n  { label: 'Editor', value: OrgRole.Editor },\n  { label: 'Admin', value: OrgRole.Admin },\n];\n\ninterface FormModel {\n  role: OrgRole;\n  name: string;\n  loginOrEmail?: string;\n  sendEmail: boolean;\n  email: string;\n}\n\ninterface Props {\n  updateLocation: typeof updateLocation;\n}\n\nexport const UserInviteForm: FC<Props> = ({ updateLocation }) => {\n  const onSubmit = async (formData: FormModel) => {\n    try {\n      await getBackendSrv().post('/api/org/invites', formData);\n    } catch (err) {\n      appEvents.emit(AppEvents.alertError, ['Failed to send invite', err.message]);\n    }\n    updateLocation({ path: 'org/users/' });\n  };\n  const defaultValues: FormModel = {\n    name: '',\n    email: '',\n    role: OrgRole.Editor,\n    sendEmail: true,\n  };\n\n  return (\n    <Forms.Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ register, control, errors }) => {\n        return (\n          <>\n            <Forms.Field\n              invalid={!!errors.loginOrEmail}\n              error={!!errors.loginOrEmail && 'Email or Username is required'}\n              label=\"Email or Username\"\n            >\n              <Forms.Input\n                size=\"md\"\n                name=\"loginOrEmail\"\n                placeholder=\"email@example.com\"\n                ref={register({ required: true })}\n              />\n            </Forms.Field>\n            <Forms.Field invalid={!!errors.name} label=\"Name\">\n              <Forms.Input size=\"md\" name=\"name\" placeholder=\"(optional)\" ref={register} />\n            </Forms.Field>\n            <Forms.Field invalid={!!errors.role} label=\"Role\">\n              <Forms.InputControl as={Forms.RadioButtonGroup} control={control} options={roles} name=\"role\" />\n            </Forms.Field>\n            <Forms.Field invalid={!!errors.sendEmail} label=\"Send invite email\">\n              <Forms.Switch name=\"sendEmail\" ref={register} />\n            </Forms.Field>\n            <HorizontalGroup>\n              <Forms.Button type=\"submit\">Submit</Forms.Button>\n              <Forms.LinkButton href={assureBaseUrl(getConfig().appSubUrl + '/org/users')} variant=\"secondary\">\n                Back\n              </Forms.LinkButton>\n            </HorizontalGroup>\n          </>\n        );\n      }}\n    </Forms.Form>\n  );\n};\n\nconst mapDispatchToProps = {\n  updateLocation,\n};\n\nexport default hot(module)(connect(null, mapDispatchToProps)(UserInviteForm));\n"],"sourceRoot":""}