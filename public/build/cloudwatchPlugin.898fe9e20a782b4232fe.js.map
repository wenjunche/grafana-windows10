{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.tsx","webpack:///./public/app/core/utils/CancelablePromise.ts"],"names":["CloudWatchQueryParameterCtrl","$scope","templateSrv","uiSegmentSrv","datasourceSrv","init","target","namespace","metricName","statistics","dimensions","period","region","id","expression","regionSegment","getSegmentForValue","namespaceSegment","metricSegment","dimSegments","_","reduce","memo","value","key","push","newKey","newOperator","newKeyValue","statSegments","map","stat","ensurePlusButton","removeDimSegment","newSegment","fake","removeStatSegment","isEmpty","onChange","getStatSegments","Promise","resolve","flatten","angular","copy","datasource","standardStatistics","s","statSegmentChanged","segment","index","splice","type","seg","segments","count","length","lastSegment","Math","max","newPlusButton","getDimSegments","$index","query","getDimensionKeys","dimensionKey","getDimensionValues","then","transformToSegments","results","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","dims","i","keySegment","valueSegment","getRegions","metricFindQuery","unshift","text","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","expandable","each","variables","variable","name","coreModule","directive","templateUrl","controller","restrict","scope","authProviderOptions","label","ConfigEditor","props","loadRegionsPromise","state","regions","this","makePromiseCancelable","loadRegions","promise","catch","isCanceled","console","warn","cancel","getDatasourceSrv","loadDatasource","options","ds","setState","err","secureJsonData","className","find","authProvider","jsonData","authType","defaultValue","option","assumeRoleArn","onUpdateDatasourceJsonDataOptionSelect","tooltip","placeholder","database","onUpdateDatasourceOption","secureJsonFields","accessKey","disabled","variant","onClick","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption","secretKey","onUpdateDatasourceJsonDataOption","defaultRegion","customMetricsNamespaces","PureComponent","idValidationEvents","EventsWithValidation","onBlur","rule","RegExp","test","errorMessage","QueryEditor","showMeta","alias","hasOwnProperty","matchExact","onRunQuery","data","metaDataExist","Object","values","event","validationEvents","labelClass","checked","series","meta","gmdMeta","ID","Expression","Period","ThrottlingErrorMessage","href","func","wait","mem","memoize","debounce","leading","args","JSON","stringify","displayAlert","datasourceName","store","dispatch","notifyApp","createErrorNotification","React","createElement","displayCustomError","title","message","CloudWatchDatasource","instanceSettings","timeSrv","proxyUrl","url","debouncedAlert","memoizedDebounce","AppNotificationTimeout","Error","debouncedCustomAlert","queries","filter","targets","item","hide","replace","getActualRegion","scopedVars","convertDimensionFormat","String","getPeriod","some","indexOf","matches","exec","extend","refId","intervalMs","maxDataPoints","datasourceId","request","from","range","valueOf","toString","to","performTimeSeriesQuery","toLowerCase","parseInt","kbn","interval_to_seconds","start","end","conf","view","stacked","isSearchExpression","every","metrics","entries","acc","encodeURIComponent","awsRequest","res","queryRequest","error","queryResult","link","buildCloudwatchConsoleUrl","toISOString","points","dataFrame","toDataFrame","datapoints","fields","config","links","targetBlank","failedRedIds","keys","regionsAffected","includes","forEach","suggestData","tables","rows","v","subtype","parameters","timeRange","r","transformSuggestDataFromTable","doMetricQueryRequest","filterDimensions","trim","instanceId","attributeName","filters","resourceType","tags","match","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","filterJson","parse","ebsVolumeIdsQuery","getEbsVolumeIds","ec2InstanceAttributeQuery","targetAttributeName","getEc2InstanceAttribute","resourceARNsQuery","tagsJSON","getResourceARNs","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","time","Date","variableExists","k","status","method","getBackendSrv","datasourceRequest","result","getDefaultRegion","date","roundUp","isString","dateMath","round","Array","isArray","valueVar","getVariableName","multi","split","displayErrorIfIsMultiTemplateVariable","fieldName","DataSourceApi","CloudWatchAnnotationsQueryCtrl","defaultsDeep","bind","assign","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","setExploreQueryField","setAnnotationQueryCtrl","hasCanceled_","reject","val"],"mappings":"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","file":"cloudwatchPlugin.898fe9e20a782b4232fe.js","sourcesContent":["import angular from 'angular';\nimport coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope: any, templateSrv: TemplateSrv, uiSegmentSrv: any, datasourceSrv: DatasourceSrv) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return Promise.resolve(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment: any, index: number) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = (segments: any) => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment: any, $index: number) => {\n      if (segment.type === 'operator') {\n        return Promise.resolve([]);\n      }\n\n      const target = $scope.target;\n      let query = Promise.resolve([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        delete target.dimensions[dimensionKey];\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment: any, index: number) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims: any = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then((results: any) => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = (addTemplateVars: any) => {\n      return (results: any) => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nexport function cloudWatchQueryParameter() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n    controller: CloudWatchQueryParameterCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      datasource: '=',\n      onChange: '&',\n    },\n  };\n}\n\ncoreModule.directive('cloudwatchQueryParameter', cloudWatchQueryParameter);\n","import React, { PureComponent } from 'react';\nimport { FormLabel, Select, Input, Button } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceOption,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\nimport { SelectableValue } from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport CloudWatchDatasource from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\nimport { CancelablePromise, makePromiseCancelable } from 'app/core/utils/CancelablePromise';\n\nconst authProviderOptions = [\n  { label: 'Access & secret key', value: 'keys' },\n  { label: 'Credentials file', value: 'credentials' },\n  { label: 'ARN', value: 'arn' },\n] as SelectableValue[];\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport interface State {\n  regions: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      regions: [],\n    };\n  }\n\n  loadRegionsPromise: CancelablePromise<any> = null;\n\n  componentDidMount() {\n    this.loadRegionsPromise = makePromiseCancelable(this.loadRegions());\n    this.loadRegionsPromise.promise.catch(({ isCanceled }) => {\n      if (isCanceled) {\n        console.warn('Cloud Watch ConfigEditor has unmounted, intialization was canceled');\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.loadRegionsPromise) {\n      this.loadRegionsPromise.cancel();\n    }\n  }\n\n  async loadRegions() {\n    await getDatasourceSrv()\n      .loadDatasource(this.props.options.name)\n      .then((ds: CloudWatchDatasource) => {\n        return ds.getRegions();\n      })\n      .then(\n        (regions: any) => {\n          this.setState({\n            regions: regions.map((region: any) => {\n              return {\n                value: region.value,\n                label: region.text,\n              };\n            }),\n          });\n        },\n        (err: any) => {\n          const regions = [\n            'ap-east-1',\n            'ap-northeast-1',\n            'ap-northeast-2',\n            'ap-northeast-3',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'ca-central-1',\n            'cn-north-1',\n            'cn-northwest-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'me-south-1',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-gov-east-1',\n            'us-gov-west-1',\n            'us-iso-east-1',\n            'us-isob-east-1',\n            'us-west-1',\n            'us-west-2',\n          ];\n\n          this.setState({\n            regions: regions.map((region: string) => {\n              return {\n                value: region,\n                label: region,\n              };\n            }),\n          });\n\n          // expected to fail when creating new datasource\n          // console.error('failed to get latest regions', err);\n        }\n      );\n  }\n\n  render() {\n    const { regions } = this.state;\n    const { options } = this.props;\n    const secureJsonData = (options.secureJsonData || {}) as CloudWatchSecureJsonData;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">CloudWatch Details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\">Auth Provider</FormLabel>\n              <Select\n                className=\"width-30\"\n                value={authProviderOptions.find(authProvider => authProvider.value === options.jsonData.authType)}\n                options={authProviderOptions}\n                defaultValue={options.jsonData.authType}\n                onChange={option => {\n                  if (options.jsonData.authType === 'arn' && option.value !== 'arn') {\n                    delete this.props.options.jsonData.assumeRoleArn;\n                  }\n                  onUpdateDatasourceJsonDataOptionSelect(this.props, 'authType')(option);\n                }}\n              />\n            </div>\n          </div>\n          {options.jsonData.authType === 'credentials' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel\n                  className=\"width-14\"\n                  tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n                >\n                  Credentials Profile Name\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"default\"\n                    value={options.jsonData.database}\n                    onChange={onUpdateDatasourceOption(this.props, 'database')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {options.jsonData.authType === 'keys' && (\n            <div>\n              {options.secureJsonFields.accessKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={onUpdateDatasourceResetOption(this.props, 'accessKey')}\n                      >\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={secureJsonData.accessKey || ''}\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'accessKey')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n              {options.secureJsonFields.secretKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={onUpdateDatasourceResetOption(this.props, 'secretKey')}\n                      >\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={secureJsonData.secretKey || ''}\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'secretKey')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          {options.jsonData.authType === 'arn' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-14\" tooltip=\"ARN of Assume Role\">\n                  Assume Role ARN\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"arn:aws:iam:*\"\n                    value={options.jsonData.assumeRoleArn || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(this.props, 'assumeRoleArn')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel\n                className=\"width-14\"\n                tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n              >\n                Default Region\n              </FormLabel>\n              <Select\n                className=\"width-30\"\n                value={regions.find(region => region.value === options.jsonData.defaultRegion)}\n                options={regions}\n                defaultValue={options.jsonData.defaultRegion}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'defaultRegion')}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\" tooltip=\"Namespaces of Custom Metrics.\">\n                Custom Metrics\n              </FormLabel>\n              <Input\n                className=\"width-30\"\n                placeholder=\"Namespace1,Namespace2\"\n                value={options.jsonData.customMetricsNamespaces || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'customMetricsNamespaces')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { ExploreQueryFieldProps } from '@grafana/data';\nimport { Input, ValidationEvents, EventsWithValidation, Switch } from '@grafana/ui';\nimport { CloudWatchQuery } from '../types';\nimport CloudWatchDatasource from '../datasource';\nimport { QueryField, Alias, QueryFieldsEditor } from './';\n\nexport type Props = ExploreQueryFieldProps<CloudWatchDatasource, CloudWatchQuery>;\n\ninterface State {\n  showMeta: boolean;\n}\n\nconst idValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: value => new RegExp(/^$|^[a-z][a-zA-Z0-9_]*$/).test(value),\n      errorMessage: 'Invalid format. Only alphanumeric characters and underscores are allowed',\n    },\n  ],\n};\n\nexport class QueryEditor extends PureComponent<Props, State> {\n  state: State = { showMeta: false };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { query } = props;\n\n    if (!query.namespace) {\n      query.namespace = '';\n    }\n\n    if (!query.metricName) {\n      query.metricName = '';\n    }\n\n    if (!query.expression) {\n      query.expression = '';\n    }\n\n    if (!query.dimensions) {\n      query.dimensions = {};\n    }\n\n    if (!query.region) {\n      query.region = 'default';\n    }\n\n    if (!query.id) {\n      query.id = '';\n    }\n\n    if (!query.alias) {\n      query.alias = '';\n    }\n\n    if (!query.statistics || !query.statistics.length) {\n      query.statistics = ['Average'];\n    }\n\n    if (!query.hasOwnProperty('matchExact')) {\n      query.matchExact = true;\n    }\n\n    return state;\n  }\n\n  onChange(query: CloudWatchQuery) {\n    const { onChange, onRunQuery } = this.props;\n    onChange(query);\n    onRunQuery();\n  }\n\n  render() {\n    const { data, query, onRunQuery } = this.props;\n    const { showMeta } = this.state;\n    const metaDataExist = data && Object.values(data).length && data.state === 'Done';\n    return (\n      <>\n        <QueryFieldsEditor {...this.props}></QueryFieldsEditor>\n        {query.statistics.length <= 1 && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <QueryField\n                label=\"Id\"\n                tooltip=\"Id can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n              >\n                <Input\n                  className=\"gf-form-input width-8\"\n                  onBlur={onRunQuery}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                    this.onChange({ ...query, id: event.target.value })\n                  }\n                  validationEvents={idValidationEvents}\n                  value={query.id || ''}\n                />\n              </QueryField>\n            </div>\n            <div className=\"gf-form gf-form--grow\">\n              <QueryField\n                className=\"gf-form--grow\"\n                label=\"Expression\"\n                tooltip=\"Optionally you can add an expression here. Please note that if a math expression that is referencing other queries is being used, it will not be possible to create an alert rule based on this query\"\n              >\n                <Input\n                  className=\"gf-form-input\"\n                  onBlur={onRunQuery}\n                  value={query.expression || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                    this.onChange({ ...query, expression: event.target.value })\n                  }\n                />\n              </QueryField>\n            </div>\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <QueryField label=\"Period\" tooltip=\"Minimum interval between points in seconds\">\n              <Input\n                className=\"gf-form-input width-8\"\n                value={query.period || ''}\n                placeholder=\"auto\"\n                onBlur={onRunQuery}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  this.onChange({ ...query, period: event.target.value })\n                }\n              />\n            </QueryField>\n          </div>\n          <div className=\"gf-form\">\n            <QueryField\n              label=\"Alias\"\n              tooltip=\"Alias replacement variables: {{metric}}, {{stat}}, {{namespace}}, {{region}}, {{period}}, {{label}}, {{YOUR_DIMENSION_NAME}}\"\n            >\n              <Alias value={query.alias} onChange={(value: string) => this.onChange({ ...query, alias: value })} />\n            </QueryField>\n            <Switch\n              label=\"Match Exact\"\n              labelClass=\"query-keyword\"\n              tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n              checked={query.matchExact}\n              onChange={() => this.onChange({ ...query, matchExact: !query.matchExact })}\n            />\n            <label className=\"gf-form-label\">\n              <a\n                onClick={() =>\n                  metaDataExist &&\n                  this.setState({\n                    showMeta: !showMeta,\n                  })\n                }\n              >\n                <i className={`fa fa-caret-${showMeta ? 'down' : 'right'}`} /> {showMeta ? 'Hide' : 'Show'} Query\n                Preview\n              </a>\n            </label>\n          </div>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n          {showMeta && metaDataExist && (\n            <table className=\"filter-table form-inline\">\n              <thead>\n                <tr>\n                  <th>Metric Data Query ID</th>\n                  <th>Metric Data Query Expression</th>\n                  <th>Period</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {data.series[0].meta.gmdMeta.map(({ ID, Expression, Period }: any) => (\n                  <tr key={ID}>\n                    <td>{ID}</td>\n                    <td>{Expression}</td>\n                    <td>{Period}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://grafana.com/docs/features/datasources/cloudwatch/#service-quotas`}\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import React from 'react';\nimport angular from 'angular';\nimport _ from 'lodash';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { AppNotificationTimeout } from 'app/types';\nimport { store } from 'app/store/store';\nimport kbn from 'app/core/utils/kbn';\nimport {\n  dateMath,\n  ScopedVars,\n  toDataFrame,\n  TimeRange,\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport memoizedDebounce from './memoizedDebounce';\nimport { CloudWatchQuery, CloudWatchJsonData } from './types';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport default class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery, CloudWatchJsonData> {\n  type: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  standardStatistics: any;\n  datasourceName: string;\n  debouncedAlert: (datasourceName: string, region: string) => void;\n  debouncedCustomAlert: (title: string, message: string) => void;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.type = 'cloudwatch';\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n    this.debouncedAlert = memoizedDebounce(displayAlert, AppNotificationTimeout.Error);\n    this.debouncedCustomAlert = memoizedDebounce(displayCustomError, AppNotificationTimeout.Error);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>) {\n    options = angular.copy(options);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.replace(this.getActualRegion(item.region), options.scopedVars, true, 'region');\n      item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n      item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.statistics = item.statistics.map(stat => this.replace(stat, options.scopedVars, true, 'statistics'));\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        if (s.indexOf('p') === 0) {\n          const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\n          return !matches || matches[0] !== s;\n        }\n\n        return false;\n      });\n\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  }\n\n  get variables() {\n    return this.templateSrv.variables.map(v => `$${v.name}`);\n  }\n\n  getPeriod(target: any, options: any) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars);\n    if (period && period.toLowerCase() !== 'auto') {\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = kbn.interval_to_seconds(period);\n      }\n\n      if (period < 1) {\n        period = 1;\n      }\n    }\n\n    return period || '';\n  }\n\n  buildCloudwatchConsoleUrl(\n    { region, namespace, metricName, dimensions, statistics, expression }: CloudWatchQuery,\n    start: string,\n    end: string,\n    title: string,\n    gmdMeta: Array<{ Expression: string; Period: string }>\n  ) {\n    region = this.getActualRegion(region);\n    let conf = {\n      view: 'timeSeries',\n      stacked: false,\n      title,\n      start,\n      end,\n      region,\n    } as any;\n\n    const isSearchExpression =\n      gmdMeta && gmdMeta.length && gmdMeta.every(({ Expression: expression }) => /SEARCH().*/.test(expression));\n    const isMathExpression = !isSearchExpression && expression;\n\n    if (isMathExpression) {\n      return '';\n    }\n\n    if (isSearchExpression) {\n      const metrics: any =\n        gmdMeta && gmdMeta.length ? gmdMeta.map(({ Expression: expression }) => ({ expression })) : [{ expression }];\n      conf = { ...conf, metrics };\n    } else {\n      conf = {\n        ...conf,\n        metrics: [\n          ...statistics.map(stat => [\n            namespace,\n            metricName,\n            ...Object.entries(dimensions).reduce((acc, [key, value]) => [...acc, key, value[0]], []),\n            {\n              stat,\n              period: gmdMeta.length ? gmdMeta[0].Period : 60,\n            },\n          ]),\n        ],\n      };\n    }\n\n    return `https://${region}.console.aws.amazon.com/cloudwatch/deeplink.js?region=${region}#metricsV2:graph=${encodeURIComponent(\n      JSON.stringify(conf)\n    )}`;\n  }\n\n  performTimeSeriesQuery(request: any, { from, to }: TimeRange): Promise<any> {\n    return this.awsRequest('/api/tsdb/query', request)\n      .then((res: any) => {\n        if (!res.results) {\n          return { data: [] };\n        }\n        return Object.values(request.queries).reduce(\n          ({ data, error }: any, queryRequest: any) => {\n            const queryResult = res.results[queryRequest.refId];\n            if (!queryResult) {\n              return { data, error };\n            }\n\n            const link = this.buildCloudwatchConsoleUrl(\n              queryRequest,\n              from.toISOString(),\n              to.toISOString(),\n              queryRequest.refId,\n              queryResult.meta.gmdMeta\n            );\n\n            return {\n              error: error || queryResult.error ? { message: queryResult.error } : null,\n              data: [\n                ...data,\n                ...queryResult.series.map(({ name, points }: any) => {\n                  const dataFrame = toDataFrame({\n                    target: name,\n                    datapoints: points,\n                    refId: queryRequest.refId,\n                    meta: queryResult.meta,\n                  });\n                  if (link) {\n                    for (const field of dataFrame.fields) {\n                      field.config.links = [\n                        {\n                          url: link,\n                          title: 'View in CloudWatch console',\n                          targetBlank: true,\n                        },\n                      ];\n                    }\n                  }\n                  return dataFrame;\n                }),\n              ],\n            };\n          },\n          { data: [], error: null }\n        );\n      })\n      .catch((err: any = { data: { error: '' } }) => {\n        if (/^Throttling:.*/.test(err.data.message)) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }: CloudWatchQuery) =>\n              !failedRedIds.includes(refId) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n\n          regionsAffected.forEach(region => this.debouncedAlert(this.datasourceName, this.getActualRegion(region)));\n        }\n\n        if (err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.data.message = err.data.error;\n        }\n\n        throw err;\n      });\n  }\n\n  transformSuggestDataFromTable(suggestData: any) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n        label: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype: any, parameters: any) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  async getMetrics(namespace: string, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionKeys(namespace: string, region: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string,\n    metricName: string,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  async metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    const statsQuery = query.match(/^statistics\\(\\)/);\n    if (statsQuery) {\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    // use billing metrics for test\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  awsRequest(url: string, data: any) {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n    };\n\n    return getBackendSrv()\n      .datasourceRequest(options)\n      .then((result: any) => {\n        return result.data;\n      });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region: string) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: { [key: string]: string | string[] }, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      const valueVar = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if (valueVar.multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(target: string, scopedVars: ScopedVars, displayErrorIfIsMultiTemplateVariable?: boolean, fieldName?: string) {\n    if (displayErrorIfIsMultiTemplateVariable) {\n      const variable = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && variable.multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n}\n","import _ from 'lodash';\nimport { AnnotationQuery } from './types';\n\nexport class CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    _.defaultsDeep(this.annotation, {\n      namespace: '',\n      metricName: '',\n      expression: '',\n      dimensions: {},\n      region: 'default',\n      id: '',\n      alias: '',\n      statistics: ['Average'],\n      matchExact: true,\n      prefixMatching: false,\n      actionPrefix: '',\n      alarmNamePrefix: '',\n    });\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(query: AnnotationQuery) {\n    Object.assign(this.annotation, query);\n  }\n}\n","import './query_parameter_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setExploreQueryField(QueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n","// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    promise.then(val => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\n    promise.catch(error => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n"],"sourceRoot":""}