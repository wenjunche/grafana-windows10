{"version":3,"sources":["webpack:///./public/app/plugins/datasource/stackdriver/types.ts","webpack:///./public/app/plugins/datasource/stackdriver/StackdriverMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/stackdriver/datasource.ts","webpack:///./public/app/plugins/datasource/stackdriver/query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/config_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/stackdriver/module.ts"],"names":["AuthType","MetricFindQueryTypes","authTypes","value","key","JWT","GCE","StackdriverMetricFindQuery","datasource","query","projectName","this","getDefaultProject","selectedQueryType","Projects","Services","MetricTypes","LabelKeys","LabelValues","ResourceTypes","Aligners","AlignmentPeriods","Aggregations","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","console","error","getProjects","projects","map","s","text","label","expandable","getMetricTypes","metricDescriptors","services","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","labelKeys","toFindQueryResult","labelKey","getLabels","labels","interpolatedKey","values","hasOwnProperty","find","m","valueType","metricKind","getAlignmentOptionsByMetric","getAggregationOptionsByMetric","alignmentPeriods","x","isString","StackdriverDatasource","instanceSettings","timeSrv","baseUrl","url","authenticationType","jsonData","metricTypesCache","options","ensureGCEDefaultProject","queries","targets","filter","target","hide","metricType","t","refId","intervalMs","datasourceId","id","scopedVars","crossSeriesReducer","perSeriesAligner","alignmentPeriod","groupBys","interpolateGroupBys","view","filters","interpolateFilters","aliasBy","length","getBackendSrv","datasourceRequest","method","data","from","range","valueOf","toString","to","results","completeFilter","_","chunk","operator","condition","reduce","res","flatten","getTimeSeries","timeRange","response","result","meta","interpolatedGroupBys","forEach","gb","interpolated","split","Array","isArray","concat","push","unit","every","stackdriverUnitMappings","Object","queryRes","series","resolvePanelUnitFromTargets","timeSerie","name","datapoints","points","annotation","title","tags","tables","rows","v","time","Date","parse","stackdriverMetricFindQuery","execute","defaultErrorMessage","path","doRequest","status","message","statusText","code","then","getGCEDefaultProject","defaultProject","catch","err","JSON","getProjectsListQuery","projectsList","log","formatStackdriverError","gceDefaultProject","interpolatedProject","metricsApiPath","appEvents","emit","CoreEvents","dsRequestError","maxRetries","variables","DataSourceApi","StackdriverQueryCtrl","$scope","$injector","onQueryChange","bind","onExecuteQuery","assign","ctrl","refresh","QueryCtrl","templateUrl","StackdriverConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","current","secureJsonData","secureJsonFields","authenticationTypes","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","resetValidationMessages","inputDataValid","json","jsonText","validateJwt","save","e","originalEvent","clipboardData","getData","StackdriverAnnotationsQueryCtrl","StackdriverVariableQueryEditor","props","queryTypes","defaults","metricTypes","state","some","setState","queryType","queryModel","q","onChange","l","templateVariables","insertTemplateVariables","onValueChange","onProjectChange","onServiceChange","onMetricTypeChange","onLabelKeyChange","onQueryTypeChange","renderQueryTypeSwitch","PureComponent"],"mappings":"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","file":"stackdriverPlugin.898fe9e20a782b4232fe.js","sourcesContent":["import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport enum AuthType {\n  JWT = 'jwt',\n  GCE = 'gce',\n}\n\nexport const authTypes = [\n  { value: 'Google JWT File', key: AuthType.JWT },\n  { value: 'GCE Default Service Account', key: AuthType.GCE },\n];\n\nexport enum MetricFindQueryTypes {\n  Projects = 'projects',\n  Services = 'services',\n  DefaultProject = 'defaultProject',\n  MetricTypes = 'metricTypes',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  ResourceTypes = 'resourceTypes',\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n}\n\nexport interface VariableQueryData {\n  selectedQueryType: string;\n  metricDescriptors: MetricDescriptor[];\n  selectedService: string;\n  selectedMetricType: string;\n  labels: string[];\n  labelKey: string;\n  metricTypes: Array<{ value: string; name: string }>;\n  services: Array<{ value: string; name: string }>;\n  projects: Array<{ value: string; name: string }>;\n  projectName: string;\n}\n\nexport interface StackdriverQuery extends DataQuery {\n  projectName: string;\n  unit?: string;\n  metricType: string;\n  service?: string;\n  refId: string;\n  crossSeriesReducer: string;\n  alignmentPeriod?: string;\n  perSeriesAligner: string;\n  groupBys?: string[];\n  filters?: string[];\n  aliasBy?: string;\n  metricKind: string;\n  valueType: string;\n  datasourceId?: number;\n  view?: string;\n}\n\nexport interface StackdriverOptions extends DataSourceJsonData {\n  defaultProject?: string;\n  gceDefaultProject?: string;\n  authenticationType?: string;\n}\n\nexport interface AnnotationTarget {\n  projectName: string;\n  metricType: string;\n  refId: string;\n  filters: string[];\n  metricKind: string;\n  valueType: string;\n  title: string;\n  text: string;\n}\n\nexport interface QueryMeta {\n  alignmentPeriod: string;\n  rawQuery: string;\n  rawQueryString: string;\n  metricLabels: { [key: string]: string[] };\n  resourceLabels: { [key: string]: string[] };\n  resourceTypes: string[];\n}\n\nexport interface MetricDescriptor {\n  valueType: string;\n  metricKind: string;\n  type: string;\n  unit: string;\n  service: string;\n  serviceShortName: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface Segment {\n  type: string;\n  value: string;\n}\n\nexport interface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition: string;\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods, ValueTypes, MetricKind } from './constants';\nimport StackdriverDatasource from './datasource';\nimport { MetricFindQueryTypes, VariableQueryData } from './types';\nimport {\n  getMetricTypesByService,\n  getAlignmentOptionsByMetric,\n  getAggregationOptionsByMetric,\n  extractServicesFromMetricDescriptors,\n  getLabelKeys,\n} from './functions';\n\nexport default class StackdriverMetricFindQuery {\n  constructor(private datasource: StackdriverDatasource) {}\n\n  async execute(query: VariableQueryData) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run StackdriverMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return projects.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: VariableQueryData) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map(s => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: VariableQueryData) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type'].map(this.toFindQueryResult);\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAlignmentOptionsByMetric(valueType, metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind as MetricKind).map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { stackdriverUnitMappings } from './constants';\nimport appEvents from 'app/core/app_events';\nimport _ from 'lodash';\nimport StackdriverMetricFindQuery from './StackdriverMetricFindQuery';\nimport { StackdriverQuery, MetricDescriptor, StackdriverOptions, Filter, VariableQueryData } from './types';\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  DataQueryResponse,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { CoreEvents } from 'app/types';\n\nexport default class StackdriverDatasource extends DataSourceApi<StackdriverQuery, StackdriverOptions> {\n  url: string;\n  baseUrl: string;\n  projectList: Array<{ label: string; value: string }>;\n  authenticationType: string;\n  queryPromise: Promise<any>;\n  metricTypesCache: { [key: string]: MetricDescriptor[] };\n  gceDefaultProject: string;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<StackdriverOptions>,\n    public templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.baseUrl = `/stackdriver/`;\n    this.url = instanceSettings.url!;\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.metricTypesCache = {};\n  }\n\n  get variables() {\n    return this.templateSrv.variables.map(v => `$${v.name}`);\n  }\n\n  async getTimeSeries(options: DataQueryRequest<StackdriverQuery>) {\n    await this.ensureGCEDefaultProject();\n    const queries = options.targets\n      .filter((target: StackdriverQuery) => {\n        return !target.hide && target.metricType;\n      })\n      .map((t: StackdriverQuery) => {\n        return {\n          refId: t.refId,\n          intervalMs: options.intervalMs,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(t.metricType, options.scopedVars || {}),\n          crossSeriesReducer: this.templateSrv.replace(t.crossSeriesReducer || 'REDUCE_MEAN', options.scopedVars || {}),\n          perSeriesAligner: this.templateSrv.replace(t.perSeriesAligner, options.scopedVars || {}),\n          alignmentPeriod: this.templateSrv.replace(t.alignmentPeriod!, options.scopedVars || {}),\n          groupBys: this.interpolateGroupBys(t.groupBys || [], options.scopedVars),\n          view: t.view || 'FULL',\n          filters: this.interpolateFilters(t.filters || [], options.scopedVars),\n          aliasBy: this.templateSrv.replace(t.aliasBy!, options.scopedVars || {}),\n          type: 'timeSeriesQuery',\n          projectName: this.templateSrv.replace(t.projectName ? t.projectName : this.getDefaultProject()),\n        };\n      });\n\n    if (queries.length > 0) {\n      const { data } = await getBackendSrv().datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries,\n        },\n      });\n      return data;\n    } else {\n      return { results: [] };\n    }\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition = 'AND']) => ({\n        key,\n        operator,\n        value,\n        condition,\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        condition,\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const response = await this.getTimeSeries({\n      targets: [\n        {\n          refId: refId,\n          datasourceId: this.id,\n          projectName: this.templateSrv.replace(projectName),\n          metricType: this.templateSrv.replace(metricType),\n          groupBys: this.interpolateGroupBys(groupBys || [], {}),\n          crossSeriesReducer: 'REDUCE_NONE',\n          view: 'HEADERS',\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<StackdriverQuery>);\n    const result = response.results[refId];\n    return result && result.meta ? result.meta.labels : {};\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: StackdriverQuery[]) {\n    let unit;\n    if (targets.length > 0 && targets.every(t => t.unit === targets[0].unit)) {\n      if (stackdriverUnitMappings.hasOwnProperty(targets[0].unit!)) {\n        // @ts-ignore\n        unit = stackdriverUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n\n  async query(options: DataQueryRequest<StackdriverQuery>): Promise<DataQueryResponse> {\n    const result: DataQueryResponse[] = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object.values(data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach((series: any) => {\n          let timeSerie: any = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          if (unit) {\n            timeSerie = { ...timeSerie, unit };\n          }\n          result.push(timeSerie);\n        });\n      });\n      return { data: result };\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        datasourceId: this.id,\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        view: 'FULL',\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n        type: 'annotationQuery',\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n      },\n    ];\n\n    const { data } = await getBackendSrv().datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      } as any;\n    });\n\n    return results;\n  }\n\n  async metricFindQuery(query: VariableQueryData) {\n    await this.ensureGCEDefaultProject();\n    const stackdriverMetricFindQuery = new StackdriverMetricFindQuery(this);\n    return stackdriverMetricFindQuery.execute(query);\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Stackdriver API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const path = `v3/projects/${this.getDefaultProject()}/metricDescriptors`;\n      const response = await this.doRequest(`${this.baseUrl}${path}`);\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Stackdriver API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Stackdriver: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return getBackendSrv()\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          queries: [\n            {\n              refId: 'getGCEDefaultProject',\n              type: 'getGCEDefaultProject',\n              datasourceId: this.id,\n            },\n          ],\n        },\n      })\n      .then(({ data }) => {\n        return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n          ? data.results.getGCEDefaultProject.meta.defaultProject\n          : '';\n      })\n      .catch(err => {\n        throw err.data.error;\n      });\n  }\n\n  formatStackdriverError(error: any) {\n    let message = 'Stackdriver: ';\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error) {\n      try {\n        const res = JSON.parse(error.data.error);\n        message += res.error.code + '. ' + res.error.message;\n      } catch (err) {\n        message += error.data.error;\n      }\n    } else {\n      message += 'Cannot connect to Stackdriver API';\n    }\n    return message;\n  }\n\n  async getProjects() {\n    try {\n      const { data } = await getBackendSrv().datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          queries: [\n            {\n              refId: 'getProjectsListQuery',\n              type: 'getProjectsListQuery',\n              datasourceId: this.id,\n            },\n          ],\n        },\n      });\n      return data.results.getProjectsListQuery.meta.projectsList;\n    } catch (error) {\n      console.log(this.formatStackdriverError(error));\n      return [];\n    }\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    try {\n      if (!projectName) {\n        return [];\n      }\n\n      const interpolatedProject = this.templateSrv.replace(projectName);\n      if (this.metricTypesCache[interpolatedProject]) {\n        return this.metricTypesCache[interpolatedProject];\n      }\n\n      const metricsApiPath = `v3/projects/${interpolatedProject}/metricDescriptors`;\n      const { data } = await this.doRequest(`${this.baseUrl}${metricsApiPath}`);\n\n      this.metricTypesCache[interpolatedProject] = data.metricDescriptors.map((m: any) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      });\n\n      return this.metricTypesCache[interpolatedProject];\n    } catch (error) {\n      appEvents.emit(CoreEvents.dsRequestError, { error: { data: { error: this.formatStackdriverError(error) } } });\n      return [];\n    }\n  }\n\n  async doRequest(url: string, maxRetries = 1): Promise<any> {\n    return getBackendSrv()\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import { QueryCtrl } from 'app/plugins/sdk';\nimport { StackdriverQuery } from './types';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { auto } from 'angular';\n\nexport class StackdriverQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, templateSrv: TemplateSrv) {\n    super($scope, $injector);\n    this.templateSrv = templateSrv;\n    this.onQueryChange = this.onQueryChange.bind(this);\n    this.onExecuteQuery = this.onExecuteQuery.bind(this);\n  }\n\n  onQueryChange(target: StackdriverQuery) {\n    Object.assign(this.target, target);\n  }\n\n  onExecuteQuery() {\n    this.$scope.ctrl.refresh();\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport { AuthType, authTypes } from './types';\n\nexport interface JWT {\n  private_key: string;\n  token_uri: string;\n  client_email: string;\n  project_id: string;\n}\n\nexport class StackdriverConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/stackdriver/partials/config.html';\n  datasourceSrv: DatasourceSrv;\n  current: any;\n  meta: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: Array<{ key: AuthType; value: string }>;\n  defaultAuthenticationType: string;\n  name: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = AuthType.JWT;\n    this.datasourceSrv = datasourceSrv;\n    this.name = this.meta.name;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = authTypes;\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { TemplateSrv } from 'app/features/templating/template_srv';\nimport { AnnotationTarget } from './types';\n\nexport class StackdriverAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { VariableQueryProps } from 'app/types/plugins';\nimport { SimpleSelect } from './';\nimport { getMetricTypes, getLabelKeys, extractServicesFromMetricDescriptors } from '../functions';\nimport { MetricFindQueryTypes, VariableQueryData } from '../types';\n\nexport class StackdriverVariableQueryEditor extends PureComponent<VariableQueryProps, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Projects, name: 'Projects' },\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    projects: [],\n    projectName: '',\n  };\n\n  constructor(props: VariableQueryProps) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = await this.props.datasource.getProjects();\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some(s => s.value === this.props.templateSrv.replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(selectedService)\n    );\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects: projects.map(({ value, label }: any) => ({ value, name: label })),\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(this.state.selectedService)\n    );\n\n    this.setState({ ...labels, metricTypes, selectedMetricType, metricDescriptors, projectName });\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey });\n  }\n\n  componentDidUpdate() {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    const query = this.queryTypes.find(q => q.value === this.state.selectedQueryType);\n    this.props.onChange(queryModel, `Stackdriver - ${query.name}`);\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some(l => l === this.props.templateSrv.replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = this.props.templateSrv.variables.map((v: any) => ({\n      name: `$${v.name}`,\n      value: `$${v.name}`,\n    }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map(l => ({ value: l, name: l })))}\n                onValueChange={e => this.onLabelKeyChange(e.target.value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={e => this.onQueryTypeChange(e.target.value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import StackdriverDatasource from './datasource';\nimport { StackdriverQueryCtrl } from './query_ctrl';\nimport { StackdriverConfigCtrl } from './config_ctrl';\nimport { StackdriverAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { StackdriverVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport {\n  StackdriverDatasource as Datasource,\n  StackdriverQueryCtrl as QueryCtrl,\n  StackdriverConfigCtrl as ConfigCtrl,\n  StackdriverAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n  StackdriverVariableQueryEditor as VariableQueryEditor,\n};\n"],"sourceRoot":""}