{"version":3,"sources":["webpack:///./public/app/plugins/datasource/input/InputDatasource.ts","webpack:///./public/app/plugins/datasource/input/utils.ts","webpack:///./public/app/plugins/datasource/input/InputQueryEditor.tsx","webpack:///./public/app/plugins/datasource/input/InputConfigEditor.tsx","webpack:///./public/app/plugins/datasource/input/module.ts"],"names":["InputDatasource","instanceSettings","data","jsonData","map","v","toDataFrame","query","describeDataFrame","this","name","options","Promise","resolve","reject","names","series","fields","field","push","text","results","targets","hide","i","length","refId","rowCount","info","status","message","DataSourceApi","getLength","hasOwnProperty","values","count","reduce","acc","dataFrameToCSV","dto","toCSV","value","label","description","InputQueryEditor","state","onSourceChange","item","props","datasource","onChange","onRunQuery","undefined","MutableDataFrame","setState","onSeriesParsed","id","selected","className","width","href","height","PureComponent","InputConfigEditor","onOptionsChange","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"mappings":"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","file":"inputDatasourcePlugin.898fe9e20a782b4232fe.js","sourcesContent":["// Types\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  DataFrame,\n  DataFrameDTO,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { InputQuery, InputOptions } from './types';\n\nexport class InputDatasource extends DataSourceApi<InputQuery, InputOptions> {\n  data: DataFrame[] = [];\n\n  constructor(instanceSettings: DataSourceInstanceSettings<InputOptions>) {\n    super(instanceSettings);\n\n    if (instanceSettings.jsonData.data) {\n      this.data = instanceSettings.jsonData.data.map(v => toDataFrame(v));\n    }\n  }\n\n  /**\n   * Convert a query to a simple text string\n   */\n  getQueryDisplayText(query: InputQuery): string {\n    if (query.data) {\n      return 'Panel Data: ' + describeDataFrame(query.data);\n    }\n    return `Shared Data From: ${this.name} (${describeDataFrame(this.data)})`;\n  }\n\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    return new Promise((resolve, reject) => {\n      const names = [];\n      for (const series of this.data) {\n        for (const field of series.fields) {\n          // TODO, match query/options?\n          names.push({\n            text: field.name,\n          });\n        }\n      }\n      resolve(names);\n    });\n  }\n\n  query(options: DataQueryRequest<InputQuery>): Promise<DataQueryResponse> {\n    const results: DataFrame[] = [];\n    for (const query of options.targets) {\n      if (query.hide) {\n        continue;\n      }\n      let data = this.data;\n      if (query.data) {\n        data = query.data.map(v => toDataFrame(v));\n      }\n      for (let i = 0; i < data.length; i++) {\n        results.push({\n          ...data[i],\n          refId: query.refId,\n        });\n      }\n    }\n    return Promise.resolve({ data: results });\n  }\n\n  testDatasource() {\n    return new Promise((resolve, reject) => {\n      let rowCount = 0;\n      let info = `${this.data.length} Series:`;\n      for (const series of this.data) {\n        const length = series.length;\n        info += ` [${series.fields.length} Fields, ${length} Rows]`;\n        rowCount += length;\n      }\n\n      if (rowCount > 0) {\n        resolve({\n          status: 'success',\n          message: info,\n        });\n      }\n      reject({\n        status: 'error',\n        message: 'No Data Entered',\n      });\n    });\n  }\n}\n\nfunction getLength(data?: DataFrameDTO | DataFrame) {\n  if (!data || !data.fields || !data.fields.length) {\n    return 0;\n  }\n  if (data.hasOwnProperty('length')) {\n    return (data as DataFrame).length;\n  }\n  return data.fields[0].values.length;\n}\n\nexport function describeDataFrame(data: Array<DataFrameDTO | DataFrame>): string {\n  if (!data || !data.length) {\n    return '';\n  }\n  if (data.length > 1) {\n    const count = data.reduce((acc, series) => {\n      return acc + getLength(series);\n    }, 0);\n    return `${data.length} Series, ${count} Rows`;\n  }\n  const series = data[0];\n  if (!series.fields) {\n    return 'Missing Fields';\n  }\n  const length = getLength(series);\n  return `${series.fields.length} Fields, ${length} Rows`;\n}\n\nexport default InputDatasource;\n","import { toDataFrame, DataFrameDTO, toCSV } from '@grafana/data';\n\nexport function dataFrameToCSV(dto?: DataFrameDTO[]) {\n  if (!dto || !dto.length) {\n    return '';\n  }\n  return toCSV(dto.map(v => toDataFrame(v)));\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { InputDatasource, describeDataFrame } from './InputDatasource';\nimport { InputQuery, InputOptions } from './types';\n\nimport { FormLabel, Select, TableInputCSV } from '@grafana/ui';\nimport { DataFrame, toCSV, SelectableValue, MutableDataFrame, QueryEditorProps } from '@grafana/data';\n\nimport { dataFrameToCSV } from './utils';\n\ntype Props = QueryEditorProps<InputDatasource, InputQuery, InputOptions>;\n\nconst options = [\n  { value: 'panel', label: 'Panel', description: 'Save data in the panel configuration.' },\n  { value: 'shared', label: 'Shared', description: 'Save data in the shared datasource object.' },\n];\n\ninterface State {\n  text: string;\n}\n\nexport class InputQueryEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  onComponentDidMount() {\n    const { query } = this.props;\n    const text = dataFrameToCSV(query.data);\n    this.setState({ text });\n  }\n\n  onSourceChange = (item: SelectableValue<string>) => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    let data: DataFrame[] | undefined = undefined;\n    if (item.value === 'panel') {\n      if (query.data) {\n        return;\n      }\n      data = [...datasource.data];\n      if (!data) {\n        data = [new MutableDataFrame()];\n      }\n      this.setState({ text: toCSV(data) });\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    this.setState({ text });\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  render() {\n    const { datasource, query } = this.props;\n    const { id, name } = datasource;\n    const { text } = this.state;\n\n    const selected = query.data ? options[0] : options[1];\n    return (\n      <div>\n        <div className=\"gf-form\">\n          <FormLabel width={4}>Data</FormLabel>\n          <Select width={6} options={options} value={selected} onChange={this.onSourceChange} />\n\n          <div className=\"btn btn-link\">\n            {query.data ? (\n              describeDataFrame(query.data)\n            ) : (\n              <a href={`datasources/edit/${id}/`}>\n                {name}: {describeDataFrame(datasource.data)} &nbsp;&nbsp;\n                <i className=\"fa fa-pencil-square-o\" />\n              </a>\n            )}\n          </div>\n        </div>\n        {query.data && <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { InputOptions } from './types';\n\nimport { TableInputCSV } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataFrame, MutableDataFrame } from '@grafana/data';\nimport { dataFrameToCSV } from './utils';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<InputOptions> {}\n\ninterface State {\n  text: string;\n}\n\nexport class InputConfigEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  componentDidMount() {\n    const { options } = this.props;\n    if (options.jsonData.data) {\n      const text = dataFrameToCSV(options.jsonData.data);\n      this.setState({ text });\n    }\n  }\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { options, onOptionsChange } = this.props;\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    // data is a property on 'jsonData'\n    const jsonData = {\n      ...options.jsonData,\n      data,\n    };\n\n    onOptionsChange({\n      ...options,\n      jsonData,\n    });\n    this.setState({ text });\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div>\n        <div className=\"gf-form-group\">\n          <h4>Shared Data:</h4>\n          <span>Enter CSV</span>\n          <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />\n        </div>\n\n        <div className=\"grafana-info-box\">\n          This data is stored in the datasource json and is returned to every user in the initial request for any\n          datasource. This is an appropriate place to enter a few values. Large datasets will perform better in other\n          datasources.\n          <br />\n          <br />\n          <b>NOTE:</b> Changes to this data will only be reflected after a browser refresh.\n        </div>\n      </div>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { InputDatasource } from './InputDatasource';\n\nimport { InputQueryEditor } from './InputQueryEditor';\nimport { InputConfigEditor } from './InputConfigEditor';\nimport { InputOptions, InputQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<InputDatasource, InputQuery, InputOptions>(InputDatasource)\n  .setConfigEditor(InputConfigEditor)\n  .setQueryEditor(InputQueryEditor);\n"],"sourceRoot":""}