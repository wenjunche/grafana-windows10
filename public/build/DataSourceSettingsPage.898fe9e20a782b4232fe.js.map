{"version":3,"sources":["webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["ButtonRow","isReadOnly","onDelete","onSubmit","onTest","className","type","disabled","onClick","event","aria-label","e2e","pages","DataSource","selectors","saveAndTest","delete","href","config","appSubUrl","buildCategories","plugins","categories","id","title","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","plugin","find","item","info","links","push","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","log","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","filter","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","datasources","defaultDatasource","init","endsWith","parseInt","slice","PluginStateinfo","props","text","state","PluginState","alpha","beta","getPluginStateInfoText","css","PluginSettings","onModelChanged","onModelChange","scopeProps","ctrl","datasourceMeta","current","_","cloneDeep","bind","this","element","components","ConfigEditor","loader","getAngularLoader","component","load","prevProps","digest","destroy","ref","React","createElement","onOptionsChange","PureComponent","pluginMeta","meta","navModel","img","subTitle","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","child","indexOf","BasicSettings","onDefaultChange","onNameChange","style","marginRight","tooltip","value","placeholder","onChange","target","required","label","checked","DataSourceSettingsPage","evt","preventDefault","appEvents","emit","CoreEvents","showConfirmModal","yesText","onConfirm","confirmDelete","loadError","showDelete","msg","toString","data","isString","nav","Contents","p","body","query","setDataSourceName","setIsDefault","testingStatus","renderIsReadOnlyMessage","status","alert","alertMessage","renderLoadError","isLoading","hasDataSource","renderConfigPageBody","renderSettings","mapDispatchToProps","hot","connectWithCleanUp","getRouteParamsId","location","getNavModel","navIndex","getDataSources","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount","mapStateToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics"],"mappings":"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","file":"DataSourceSettingsPage.898fe9e20a782b4232fe.js","sourcesContent":["import React, { FC } from 'react';\nimport { e2e } from '@grafana/e2e';\n\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={event => onSubmit(event)}\n          aria-label={e2e.pages.DataSource.selectors.saveAndTest}\n        >\n          Save &amp; Test\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          Test\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={e2e.pages.DataSource.selectors.delete}\n      >\n        Delete\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ];\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.log('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/data';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={element => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-th-large',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as GenericDataSourcePlugin\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import React, { FC } from 'react';\nimport { FormLabel, Input, Switch } from '@grafana/ui';\nimport { e2e } from '@grafana/e2e';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <FormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The Default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </FormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={event => onNameChange(event.target.value)}\n            required\n            aria-label={e2e.pages.DataSource.selectors.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={event => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport isString from 'lodash/isString';\nimport { e2e } from '@grafana/e2e';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  loadDataSource,\n  updateDataSource,\n  initDataSourceSettings,\n  testDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n// Types\nimport { CoreEvents, StoreState } from 'app/types/';\nimport { UrlQueryMap } from '@grafana/runtime';\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel } from '@grafana/data';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  initDataSourceSettings: typeof initDataSourceSettings;\n  testDataSource: typeof testDataSource;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n  testingStatus?: {\n    message?: string;\n    status?: string;\n  };\n  loadError?: Error | string;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, pageId } = this.props;\n    initDataSourceSettings(pageId);\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this data source?',\n      yesText: 'Delete',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this datasource.\n      </div>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'fa fa-fw fa-warning',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  Delete\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                Back\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>Page Not Found: {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, testingStatus, plugin } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={state => setIsDefault(state)}\n          onNameChange={name => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingStatus && testingStatus.message && (\n            <div className={`alert-${testingStatus.status} alert`} aria-label={e2e.pages.DataSource.selectors.alert}>\n              <div className=\"alert-icon\">\n                {testingStatus.status === 'error' ? (\n                  <i className=\"fa fa-exclamation-triangle\" />\n                ) : (\n                  <i className=\"fa fa-check\" />\n                )}\n              </div>\n              <div className=\"alert-body\">\n                <div className=\"alert-title\" aria-label={e2e.pages.DataSource.selectors.alertMessage}>\n                  {testingStatus.message}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={event => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={event => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource && <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div>}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.dataSourceSettings)(DataSourceSettingsPage)\n);\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}